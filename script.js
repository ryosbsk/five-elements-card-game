// ‰∫îË°å„Ç´„Éº„Éâ„Éê„Éà„É´„Ç≤„Éº„É†

// SE„ÉªBGMÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É† üîä
const SoundManager = {
    sounds: {},
    bgm: null,
    seEnabled: true,
    bgmEnabled: true,
    bgmStarted: false, // BGMÈáçË§áÂÜçÁîüÈò≤Ê≠¢
    
    // Èü≥Â£∞„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
    init: function() {
        console.log('üîä Èü≥Èüø„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÈñãÂßã');
        
        // SEË™≠„ÅøËæº„Åø
        const soundFiles = {
            summon: 'assets/audio/se/summon.mp3',
            select: 'assets/audio/se/select.mp3', 
            attack: 'assets/audio/se/attack.mp3',
            victory: 'assets/audio/se/victory.mp3',
            defeat: 'assets/audio/se/defeat.mp3',
            button: 'assets/audio/se/button.mp3'
        };
        
        for (const [key, path] of Object.entries(soundFiles)) {
            try {
                this.sounds[key] = new Audio(path);
                this.sounds[key].preload = 'auto';
                this.sounds[key].volume = 0.5; // ÈÅ©Â∫¶„Å™Èü≥Èáè
                console.log('‚úÖ SEË™≠„ÅøËæº„ÅøÂÆå‰∫Ü:', key, '‚Üí', path);
            } catch (error) {
                console.warn('‚ö†Ô∏è SEË™≠„ÅøËæº„ÅøÂ§±Êïó:', key, error);
            }
        }
        
        // BGMË™≠„ÅøËæº„Åø
        try {
            this.bgm = new Audio('assets/audio/bgm/bgm.mp3');
            this.bgm.preload = 'auto';
            this.bgm.volume = 0.05; // SE„Çà„ÇäÂ∞è„Åï„ÅÑÈü≥Èáè
            this.bgm.loop = true; // „É´„Éº„ÉóÂÜçÁîü
            console.log('‚úÖ BGMË™≠„ÅøËæº„ÅøÂÆå‰∫Ü: bgm.mp3');
        } catch (error) {
            console.warn('‚ö†Ô∏è BGMË™≠„ÅøËæº„ÅøÂ§±Êïó:', error);
        }
    },
    
    // SEÂÜçÁîü
    play: function(soundName) {
        if (!this.seEnabled) {
            console.log('üîá SEÁÑ°Âäπ„ÅÆ„Åü„ÇÅÂÜçÁîü„Çπ„Ç≠„ÉÉ„Éó:', soundName);
            return;
        }
        
        const sound = this.sounds[soundName];
        if (sound) {
            try {
                // ÂÜçÁîü‰ΩçÁΩÆ„Çí„É™„Çª„ÉÉ„Éà„Åó„Å¶ÂÜçÁîü
                sound.currentTime = 0;
                sound.play();
                console.log('üîä SEÂÜçÁîü:', soundName);
            } catch (error) {
                console.warn('‚ö†Ô∏è SEÂÜçÁîü„Ç®„É©„Éº:', soundName, error);
            }
        } else {
            console.warn('‚ùå SEÊú™ÁôªÈå≤:', soundName);
        }
    },
    
    // BGMÂÜçÁîüÈñãÂßãÔºà„É¶„Éº„Ç∂„ÉºÊìç‰ΩúÂæå„Å´ÂÆüË°åÔºâ
    startBGM: function() {
        if (!this.bgmEnabled || !this.bgm || this.bgmStarted) {
            console.log('üéµ BGMÁÑ°Âäπ„ÄÅÊú™Ë™≠„ÅøËæº„Åø„ÄÅ„Åæ„Åü„ÅØÊó¢„Å´ÈñãÂßãÊ∏à„Åø');
            return;
        }
        
        try {
            this.bgm.currentTime = 0;
            const playPromise = this.bgm.play();
            
            if (playPromise !== undefined) {
                playPromise.then(() => {
                    console.log('üéµ BGMÂÜçÁîüÈñãÂßã');
                    this.bgmStarted = true;
                }).catch(error => {
                    console.warn('‚ö†Ô∏è BGMËá™ÂãïÂÜçÁîü„Ç®„É©„ÉºÔºà„É¶„Éº„Ç∂„ÉºÊìç‰ΩúÂæÖ„Å°Ôºâ:', error.message);
                });
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è BGMÂÜçÁîü„Ç®„É©„Éº:', error);
        }
    },
    
    // BGMÂÅúÊ≠¢
    stopBGM: function() {
        if (this.bgm) {
            this.bgm.pause();
            this.bgm.currentTime = 0;
            this.bgmStarted = false;
            console.log('üéµ BGMÂÅúÊ≠¢');
        }
    },
    
    // Èü≥ÈáèË®≠ÂÆö
    setBGMVolume: function(volume) {
        if (this.bgm) {
            this.bgm.volume = volume / 100;
            console.log('üéµ BGMÈü≥ÈáèË®≠ÂÆö:', volume);
        }
    },
    
    setSEVolume: function(volume) {
        Object.values(this.sounds).forEach(sound => {
            sound.volume = volume / 100;
        });
        console.log('üîä SEÈü≥ÈáèË®≠ÂÆö:', volume);
    },
    
    // SEÊúâÂäπ/ÁÑ°ÂäπÂàá„ÇäÊõø„Åà
    toggleSE: function() {
        this.seEnabled = !this.seEnabled;
        console.log('üîä SEË®≠ÂÆöÂ§âÊõ¥:', this.seEnabled ? 'ÊúâÂäπ' : 'ÁÑ°Âäπ');
        return this.seEnabled;
    },
    
    // BGMÊúâÂäπ/ÁÑ°ÂäπÂàá„ÇäÊõø„Åà
    toggleBGM: function() {
        this.bgmEnabled = !this.bgmEnabled;
        if (this.bgmEnabled) {
            this.startBGM();
        } else {
            this.stopBGM();
        }
        console.log('üéµ BGMË®≠ÂÆöÂ§âÊõ¥:', this.bgmEnabled ? 'ÊúâÂäπ' : 'ÁÑ°Âäπ');
        return this.bgmEnabled;
    }
};

// ‰∫îË°åÁõ∏Ââã„Ç∑„Çπ„ÉÜ„É†
const elementalEffectiveness = {
    Êú®: "Âúü",  // Êú®„ÅåÂúü„ÇíÁ™Å„ÅçÁ†¥„Çã
    ÁÅ´: "Èáë",  // ÁÅ´„ÅåÈáëÂ±û„ÇíÊ∫∂„Åã„Åô  
    Âúü: "Ê∞¥",  // Âúü„ÅåÊ∞¥„ÇíÂê∏Âèé
    Èáë: "Êú®",  // ÈáëÂ±û„ÅåÊú®„ÇíÂàá„Çã
    Ê∞¥: "ÁÅ´"   // Ê∞¥„ÅåÁÅ´„ÇíÊ∂à„Åô
};

// üåü ‰∫îË°å„Ç¢„Ç§„Ç≥„É≥„Éû„ÉÉ„Éî„É≥„Ç∞
const elementIcons = {
    ÁÅ´: 'üî•',
    Ê∞¥: 'üíß', 
    Êú®: 'üåø',
    Èáë: 'ü•á',
    Âúü: 'ü™®'
};

// „Ç´„Éº„Éâ„Éá„Éº„Çø
const cardData = [
    // „Ç≥„Çπ„Éà1„Ç´„Éº„Éâ
    { name: "ÁÅ´Ëä±", element: "ÁÅ´", hp: 20, attack: 16, speed: 4, cost: 1 },
    { name: "Â∞èÁü≥", element: "Âúü", hp: 25, attack: 14, speed: 1, cost: 1 },
    { name: "ÈãºÁâá", element: "Èáë", hp: 23, attack: 14, speed: 3, cost: 1 },
    { name: "Ê∞¥Êª¥", element: "Ê∞¥", hp: 24, attack: 11, speed: 5, cost: 1 },
    { name: "Ëã•ËäΩ", element: "Êú®", hp: 28, attack: 10, speed: 2, cost: 1 },
    
    // „Ç≥„Çπ„Éà2„Ç´„Éº„Éâ  
    { name: "ÁÇé„ÅÆÈ≥•", element: "ÁÅ´", hp: 22, attack: 18, speed: 6, cost: 2 },
    { name: "Â≤©„ÅÆÂ∑®‰∫∫", element: "Âúü", hp: 27, attack: 16, speed: 3, cost: 2 },
    { name: "Èãº„ÅÆÁãº", element: "Èáë", hp: 25, attack: 16, speed: 5, cost: 2 },
    { name: "Ê∞¥„ÅÆÁ≤æÈúä", element: "Ê∞¥", hp: 26, attack: 13, speed: 7, cost: 2 },
    { name: "Ê£Æ„ÅÆÁ≤æ", element: "Êú®", hp: 30, attack: 12, speed: 4, cost: 2 }
];

// „Ç≤„Éº„É†Áä∂ÊÖã
let gameState = {
    phase: 'draw',
    turn: 1,
    playerPP: 1,
    maxPP: 1,
    enemyPP: 1,
    gameOver: false, // „Ç≤„Éº„É†ÁµÇ‰∫Ü„Éï„É©„Ç∞
    enemyMaxPP: 1,
    playerHand: [],
    playerDeck: [],
    enemyHand: [],
    enemyDeck: [],
    playerField: [null, null, null],
    enemyField: [null, null, null],
    defeatedCost: 0,
    enemyDefeatedCost: 0,
    attackMode: false,
    currentAttacker: null,
    justStartedAttack: false,
    currentEnemyAttacker: null, // ÁèæÂú®ÊîªÊíÉÊ∫ñÂÇô‰∏≠„ÅÆÊïµ„Ç´„Éº„Éâ
    simultaneousCombatCards: [], // ÁèæÂú®Áõ∏Êâì„Å°‰∏≠„ÅÆ„Ç´„Éº„Éâ
    battleQueue: [],
    turnOrder: [],
    messageHistory: []
};

// DOMË¶ÅÁ¥†
const elements = {
    phase: document.getElementById('current-phase'),
    turn: document.getElementById('turn-counter'),
    pp: document.getElementById('pp-counter'),
    victory: document.getElementById('victory-counter'),
    enemyHandCount: document.getElementById('enemy-hand-count'),
    enemyPP: document.getElementById('enemy-pp'),
    enemyVictory: document.getElementById('enemy-victory-counter'),
    message: document.getElementById('game-message'),
    playerHand: document.getElementById('player-hand'),
    endTurnBtn: document.getElementById('end-turn-btn'),
    skipActionBtn: document.getElementById('skip-action-btn'),
    restartBtn: document.getElementById('restart-btn'),
    gameBackground: document.getElementById('game-background'),
    // „Çπ„Çø„Éº„ÉàÁîªÈù¢Ë¶ÅÁ¥†
    startScreen: document.getElementById('start-screen'),
    startBtn: document.getElementById('start-game-btn'),
    gameContainer: document.getElementById('game-container'),
    // Áµ±Âêà„Ç≥„É≥„Éà„É≠„Éº„É´„Éë„Éç„É´Ë¶ÅÁ¥†
    controlPanel: document.getElementById('control-panel'),
    audioToggle: document.getElementById('audio-toggle'),
    audioPanel: document.getElementById('audio-panel'),
    audioClose: document.getElementById('audio-close'),
    bgmToggle: document.getElementById('bgm-toggle'),
    seToggle: document.getElementById('se-toggle'),
    bgmVolume: document.getElementById('bgm-volume'),
    seVolume: document.getElementById('se-volume')
};

// „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞
function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
}

function createCard(cardData, isPlayer = true) {
    const card = {
        ...cardData,
        id: Math.random().toString(36).substr(2, 9),
        maxHp: cardData.hp,
        isPlayer: isPlayer
    };
    return card;
}

function createCardElement(card) {
    const cardElement = document.createElement('div');
    cardElement.className = `card ${card.element}`;
    cardElement.dataset.cardId = card.id;
    
    cardElement.innerHTML = `
        <div class="card-content-vertical">
            <div class="card-name">
                <span class="element-cost-overlay">
                    <span class="element-icon">${elementIcons[card.element]}</span>
                    <span class="cost-number">${card.cost}</span>
                </span>
                ${card.name}
            </div>
            <div class="card-stats-overlay">
                <div class="stat-overlay">
                    <span class="stat-icon">‚ù§Ô∏è</span>
                    <span class="stat-number">${card.hp}</span>
                </div>
                <div class="stat-overlay">
                    <span class="stat-icon">‚öîÔ∏è</span>
                    <span class="stat-number">${card.attack}</span>
                </div>
                <div class="stat-overlay">
                    <span class="stat-icon">‚ö°</span>
                    <span class="stat-number">${card.speed}</span>
                </div>
            </div>
        </div>
    `;
    
    return cardElement;
}

function updateDisplay() {
    // „Éï„Çß„Éº„Ç∫Ë°®Á§∫„ÅÆÊîπÂñÑ
    const phaseNames = {
        'draw': '„Éâ„É≠„Éº„Éï„Çß„Éº„Ç∫',
        'summon': 'Âè¨Âñö„Éï„Çß„Éº„Ç∫',
        'battle': 'Êà¶Èóò„Éï„Çß„Éº„Ç∫',
        'end': 'ÁµÇ‰∫Ü„Éï„Çß„Éº„Ç∫',
        'gameover': '„Ç≤„Éº„É†ÁµÇ‰∫Ü'
    };
    
    
    if (elements.phase) elements.phase.textContent = phaseNames[gameState.phase] || gameState.phase;
    if (elements.turn) elements.turn.textContent = `„Çø„Éº„É≥: ${gameState.turn}`;
    if (elements.pp) elements.pp.textContent = `PP: ${gameState.playerPP}/${gameState.maxPP}`;
    if (elements.victory) elements.victory.textContent = `ÊíÉÁ†¥: ${gameState.defeatedCost}/5`;
    if (elements.enemyHandCount) elements.enemyHandCount.textContent = `üí≥${gameState.enemyHand.length}Êûö`;
    if (elements.enemyPP) elements.enemyPP.textContent = `üíé${gameState.enemyPP}/${gameState.enemyMaxPP}`;
    if (elements.enemyVictory) elements.enemyVictory.textContent = `üèÜ${gameState.enemyDefeatedCost}/5`;
    
    // „Éó„É¨„Ç§„É§„Éº„Ç≥„É≥„Éë„ÇØ„ÉàÊÉÖÂ†±Êõ¥Êñ∞
    const playerPPCompact = document.getElementById('player-pp-compact');
    const playerVictoryCompact = document.getElementById('player-victory-compact');
    const playerTurnCompact = document.getElementById('player-turn-compact');
    
    if (playerPPCompact) playerPPCompact.textContent = `üíé${gameState.playerPP}/${gameState.maxPP}`;
    if (playerVictoryCompact) playerVictoryCompact.textContent = `üèÜ${gameState.defeatedCost}/5`;
    if (playerTurnCompact) playerTurnCompact.textContent = `üîÑ„Çø„Éº„É≥${gameState.turn}`;
    
    updateHandDisplay();
    updateFieldDisplay();
    
    // „Éú„Çø„É≥„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ
    if (gameState.phase === 'summon') {
        elements.endTurnBtn.textContent = 'Êà¶Èóò„Éï„Çß„Éº„Ç∫„Å∏';
        elements.endTurnBtn.disabled = false;
        elements.endTurnBtn.style.display = 'inline-block';
        elements.skipActionBtn.style.display = 'none';
    } else if (gameState.phase === 'battle') {
        // Êà¶Èóò„Éï„Çß„Éº„Ç∫‰∏≠„ÅØË°åÂãï„Çπ„Ç≠„ÉÉ„Éó„Éú„Çø„É≥„ÅÆ„ÅøË°®Á§∫
        const currentTurnCard = gameState.turnOrder.find(card => !card.hasActed);
        if (currentTurnCard && currentTurnCard.isPlayer) {
            elements.skipActionBtn.style.display = 'inline-block';
            elements.skipActionBtn.disabled = false;
        } else {
            elements.skipActionBtn.style.display = 'none';
        }
        elements.endTurnBtn.style.display = 'none';
    } else {
        elements.endTurnBtn.disabled = true;
        elements.endTurnBtn.style.display = 'inline-block';
        elements.skipActionBtn.style.display = 'none';
    }
    
    // üîç „Éï„Çß„Éº„Ç∫„Çπ„Ç≠„ÉÉ„ÉóÊ§úÂá∫Ê©üËÉΩ
    detectPhaseSkip();
}

function detectPhaseSkip() {
    // Âè¨Âñö„Éï„Çß„Éº„Ç∫„Å™„ÅÆ„Å´ÈÖçÁΩÆÂèØËÉΩ„Å™Áä∂Ê≥Å„Åå„ÉÅ„Çß„ÉÉ„ÇØ
    if (gameState.phase === 'summon') {
        const hasEmptySlots = gameState.playerField.includes(null);
        const hasPlayableCards = gameState.playerHand.some(card => gameState.playerPP >= card.cost);
        const canPlay = hasEmptySlots && hasPlayableCards;
        
        // „Éï„Çß„Éº„Ç∫„Çπ„Ç≠„ÉÉ„Éó„ÅÆÂèØËÉΩÊÄß„Åå„ÅÇ„ÇãÊù°‰ª∂„Çí„É≠„Ç∞Âá∫Âäõ
        if (!canPlay) {
            console.log('‚ö†Ô∏è Âè¨Âñö„Éï„Çß„Éº„Ç∫„Å†„ÅåÈÖçÁΩÆ‰∏çÂèØËÉΩ„Å™Áä∂Ê≥Å„ÇíÊ§úÂá∫:', {
                Á©∫„Åç„Çπ„É≠„ÉÉ„Éà„ÅÇ„Çä: hasEmptySlots,
                ÈÖçÁΩÆÂèØËÉΩ„Ç´„Éº„Éâ„ÅÇ„Çä: hasPlayableCards,
                „Éó„É¨„Ç§„É§„ÉºPP: gameState.playerPP,
                ÊâãÊú≠: gameState.playerHand.map(c => `${c.name}(„Ç≥„Çπ„Éà:${c.cost})`),
                „Éï„Ç£„Éº„É´„ÉâÁä∂Ê≥Å: gameState.playerField.map((c, i) => c ? `${i}:${c.name}` : `${i}:Á©∫`),
                „Åì„ÅÆÁä∂Ê≥Å„Åß„Çπ„Ç≠„ÉÉ„Éó„Åï„Çå„ÇãÂèØËÉΩÊÄß: '„Åì„ÅÆÂæåËá™ÂãïÁöÑ„Å´Êà¶Èóò„Éï„Çß„Éº„Ç∫„Å´ÁßªË°å„Åô„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô'
            });
        }
        
        // Êïµ„Éï„Ç£„Éº„É´„ÉâÊ∫ÄÊùØ„ÉÅ„Çß„ÉÉ„ÇØ
        const enemyFieldFull = gameState.enemyField.every(c => c !== null);
        if (enemyFieldFull && !canPlay) {
            console.log('üö® „Éï„Çß„Éº„Ç∫„Çπ„Ç≠„ÉÉ„ÉóÈ´òÁ¢∫ÁéáÁä∂Ê≥Å:', {
                Êïµ„Éï„Ç£„Éº„É´„ÉâÊ∫ÄÊùØ: enemyFieldFull,
                „Éó„É¨„Ç§„É§„ÉºÈÖçÁΩÆ‰∏çÂèØ: !canPlay,
                Êé®ÂÆöÂéüÂõ†: 'Êïµ„Éï„Ç£„Éº„É´„ÉâÊ∫ÄÊùØ + „Éó„É¨„Ç§„É§„ÉºÈÖçÁΩÆ‰∏çÂèØËÉΩ„Åß„Çπ„Ç≠„ÉÉ„Éó„ÅåÁô∫Áîü„Åô„ÇãÂèØËÉΩÊÄß'
            });
        }
    }
}

function updateHandDisplay() {
    const playerHandElement = document.getElementById('player-hand');
    if (!playerHandElement) {
        console.error('player-hand element not found');
        return;
    }
    
    playerHandElement.innerHTML = '';
    gameState.playerHand.forEach(card => {
        const cardElement = createCardElement(card);
        
        // „Ç´„Éº„Éâ„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà
        cardElement.addEventListener('click', () => {
            if (gameState.gameOver) {
                console.log('üö´ „Ç≤„Éº„É†ÁµÇ‰∫ÜÊ∏à„Åø - „Ç´„Éº„ÉâÈÅ∏ÊäûÁÑ°Âäπ');
                return;
            }
            if (gameState.phase === 'summon' && canPlayCard(card)) {
                playCard(card);
            }
        });
        
        // PP‰∏çË∂≥„ÅÆÂ†¥Âêà„ÅØÊöó„Åè„Åô„Çã
        if (card.cost > gameState.playerPP) {
            cardElement.style.opacity = '0.5';
        }
        
        playerHandElement.appendChild(cardElement);
    });
}

function updateFieldDisplay() {
    // „Éó„É¨„Ç§„É§„Éº„Éï„Ç£„Éº„É´„Éâ
    for (let i = 0; i < 3; i++) {
        const slot = document.getElementById(`player-slot-${i}`);
        if (gameState.playerField[i]) {
            const cardElement = createCardElement(gameState.playerField[i]);
            
            // Áõ∏Êâì„Å°„Ç∑„Çπ„ÉÜ„É†ÂâäÈô§Ê∏à„Åø
            
            // Êà¶Èóò„Éï„Çß„Éº„Ç∫„Åß„ÅÆÊîªÊíÉ„ÇØ„É™„ÉÉ„ÇØ
            if (gameState.phase === 'battle' && !gameState.playerField[i].hasActed) {
                // ÁèæÂú®„ÅÆË°åÂãïÈ†ÜÂ∫è„Çí„ÉÅ„Çß„ÉÉ„ÇØ
                const currentTurnCard = gameState.turnOrder.find(card => !card.hasActed);
                if (currentTurnCard && currentTurnCard.id === gameState.playerField[i].id) {
                    cardElement.addEventListener('click', (event) => {
                        if (gameState.gameOver) {
                            console.log('üö´ „Ç≤„Éº„É†ÁµÇ‰∫ÜÊ∏à„Åø - ÊîªÊíÉÈÅ∏ÊäûÁÑ°Âäπ');
                            return;
                        }
                        console.log('üéØ „Éó„É¨„Ç§„É§„Éº„Ç´„Éº„Éâ„ÇØ„É™„ÉÉ„ÇØ:', gameState.playerField[i].name, '„ÅßÊîªÊíÉÈñãÂßãÊ∫ñÂÇôÔºÅ');
                        event.stopPropagation(); // Ë¶™Ë¶ÅÁ¥†„Å∏„ÅÆ‰ºùÊí≠„ÇíÈò≤Ê≠¢
                        if (!gameState.attackMode) {
                            console.log('‚öîÔ∏è ÊîªÊíÉ„É¢„Éº„ÉâÈñãÂßã:', gameState.playerField[i].name, '‚Üí Êïµ„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
                            startAttack(gameState.playerField[i]);
                        } else {
                            console.log('‚ö†Ô∏è ÊîªÊíÉ„É¢„Éº„ÉâÊó¢„Å´ÊúâÂäπ‰∏≠„Åß„Åô');
                        }
                    });
                    cardElement.classList.add('selectable');
                    cardElement.classList.add('current-turn');
                }
            }
            
            slot.innerHTML = '';
            slot.appendChild(cardElement);
        } else {
            slot.innerHTML = '<div class="empty-slot">Á©∫</div>';
        }
    }
    
    // Êïµ„Éï„Ç£„Éº„É´„Éâ
    for (let i = 0; i < 3; i++) {
        const slot = document.getElementById(`enemy-slot-${i}`);
        if (gameState.enemyField[i]) {
            const cardElement = createCardElement(gameState.enemyField[i]);
            
            // ÊïµË°åÂãïÂæÖÊ©ü„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÔºàÁµ±‰∏ÄÔºâü§ñ
            if (gameState.phase === 'battle' && !gameState.enemyField[i].hasActed) {
                const currentTurnCard = gameState.turnOrder.find(card => !card.hasActed);
                if (currentTurnCard && currentTurnCard.id === gameState.enemyField[i].id) {
                    applyEnemyActionAnimation(cardElement, gameState.enemyField[i].name);
                    cardElement.classList.add('enemy-turn');
                }
            }
            
            // ÊïµË°åÂãï„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÔºàÁµ±‰∏ÄÔºâ ü§ñ
            if (gameState.currentEnemyAttacker && gameState.currentEnemyAttacker.id === gameState.enemyField[i].id) {
                applyEnemyActionAnimation(cardElement, gameState.enemyField[i].name);
            }
            
            // Áõ∏Êâì„Å°„Ç∑„Çπ„ÉÜ„É†ÂâäÈô§Ê∏à„Åø
            
            // ÊîªÊíÉÂØæË±°„Å®„Åó„Å¶ÈÅ∏ÊäûÂèØËÉΩ
            if (gameState.attackMode) {
                cardElement.classList.add('selectable-target');
                cardElement.addEventListener('click', (event) => {
                    if (gameState.gameOver) {
                        console.log('üö´ „Ç≤„Éº„É†ÁµÇ‰∫ÜÊ∏à„Åø - ÊîªÊíÉÂÆüË°åÁÑ°Âäπ');
                        return;
                    }
                    console.log('üéØ Êïµ„Ç´„Éº„ÉâÈÅ∏Êäû:', gameState.enemyField[i].name, '‚Üí ÊîªÊíÉÂÆüË°å„Åó„Åæ„ÅôÔºÅ');
                    event.stopPropagation(); // Ë¶™Ë¶ÅÁ¥†„Å∏„ÅÆ‰ºùÊí≠„ÇíÈò≤Ê≠¢
                    event.preventDefault(); // „Éá„Éï„Ç©„É´„Éà„Ç§„Éô„É≥„Éà„ÇíÈò≤Ê≠¢
                    executeAttack(gameState.currentAttacker, gameState.enemyField[i]);
                });
            }
            
            slot.innerHTML = '';
            slot.appendChild(cardElement);
        } else {
            slot.innerHTML = '<div class="empty-slot">Á©∫</div>';
        }
    }
}

// ÊîªÊíÉ„É¢„Éº„Éâ‰∏≠„Å´Êïµ„Éï„Ç£„Éº„É´„Éâ„ÅÆ„ÅøÊõ¥Êñ∞„Åô„ÇãÈñ¢Êï∞
function updateEnemyFieldOnly() {
    // Êïµ„Éï„Ç£„Éº„É´„Éâ
    for (let i = 0; i < 3; i++) {
        const slot = document.getElementById(`enemy-slot-${i}`);
        if (gameState.enemyField[i]) {
            const cardElement = createCardElement(gameState.enemyField[i]);
            
            // ÊïµË°åÂãïÂæÖÊ©ü„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÔºàÁµ±‰∏ÄÔºâü§ñ
            if (gameState.phase === 'battle' && !gameState.enemyField[i].hasActed) {
                const currentTurnCard = gameState.turnOrder.find(card => !card.hasActed);
                if (currentTurnCard && currentTurnCard.id === gameState.enemyField[i].id) {
                    applyEnemyActionAnimation(cardElement, gameState.enemyField[i].name);
                    cardElement.classList.add('enemy-turn');
                }
            }
            
            // ÊïµË°åÂãï„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÔºàÁµ±‰∏ÄÔºâ ü§ñ
            if (gameState.currentEnemyAttacker && gameState.currentEnemyAttacker.id === gameState.enemyField[i].id) {
                applyEnemyActionAnimation(cardElement, gameState.enemyField[i].name);
            }
            
            // ÊîªÊíÉÂØæË±°„Å®„Åó„Å¶ÈÅ∏ÊäûÂèØËÉΩ + ‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏Ë°®Á§∫
            if (gameState.attackMode && gameState.currentAttacker) {
                cardElement.classList.add('selectable-target');
                
                // ‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏„ÇíË°®Á§∫
                const damageInfo = calculateElementalDamage(gameState.currentAttacker, gameState.enemyField[i]);
                const canKill = gameState.enemyField[i].hp <= damageInfo.damage;
                
                const damageElement = document.createElement('div');
                damageElement.className = 'damage-preview-integrated';
                damageElement.innerHTML = canKill ? 
                    `-${damageInfo.damage} üíÄ` : 
                    `-${damageInfo.damage}`;
                damageElement.style.cssText = `
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: rgba(220, 53, 69, 0.95);
                    color: white;
                    padding: 6px 12px;
                    border-radius: 16px;
                    font-size: 14px;
                    font-weight: bold;
                    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8);
                    border: 2px solid rgba(255, 255, 255, 0.3);
                    z-index: 100;
                    animation: damagePreviewPulse 1.5s ease-in-out infinite;
                    pointer-events: none;
                `;
                
                cardElement.appendChild(damageElement);
                console.log(`‚ú® [${i}] Áµ±Âêà‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏Ë°®Á§∫:`, gameState.enemyField[i].name, `‚Üí ${damageInfo.damage}„ÉÄ„É°„Éº„Ç∏`);
                
                cardElement.addEventListener('click', (event) => {
                    if (gameState.gameOver) {
                        console.log('üö´ „Ç≤„Éº„É†ÁµÇ‰∫ÜÊ∏à„Åø - ÊîªÊíÉÂÆüË°åÁÑ°Âäπ');
                        return;
                    }
                    console.log('üéØ Êïµ„Ç´„Éº„ÉâÈÅ∏Êäû:', gameState.enemyField[i].name, '‚Üí ÊîªÊíÉÂÆüË°å„Åó„Åæ„ÅôÔºÅ');
                    event.stopPropagation(); // Ë¶™Ë¶ÅÁ¥†„Å∏„ÅÆ‰ºùÊí≠„ÇíÈò≤Ê≠¢
                    event.preventDefault(); // „Éá„Éï„Ç©„É´„Éà„Ç§„Éô„É≥„Éà„ÇíÈò≤Ê≠¢
                    executeAttack(gameState.currentAttacker, gameState.enemyField[i]);
                });
            }
            
            slot.innerHTML = '';
            slot.appendChild(cardElement);
        } else {
            slot.innerHTML = '<div class="empty-slot">Á©∫</div>';
        }
    }
}

function showMessage(message) {
    // Â±•Ê≠¥„Å´ËøΩÂä†
    gameState.messageHistory.push({
        text: message,
        timestamp: Date.now()
    });
    
    // Â±•Ê≠¥„Åå20ÂÄã„ÇíË∂Ö„Åà„Åü„ÇâÂè§„ÅÑ„ÇÇ„ÅÆ„ÇíÂâäÈô§
    if (gameState.messageHistory.length > 20) {
        gameState.messageHistory.shift();
    }
    
    // „É°„ÉÉ„Çª„Éº„Ç∏„Ç®„É™„Ç¢„ÇíÊõ¥Êñ∞
    updateMessageDisplay();
}

function updateMessageDisplay() {
    const messageElement = elements.message;
    const historyListElement = document.getElementById('message-history-list');
    
    // ÊúÄÊñ∞„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫
    const latestMessage = gameState.messageHistory[gameState.messageHistory.length - 1];
    if (latestMessage) {
        messageElement.textContent = latestMessage.text;
    }
    
    // Â±•Ê≠¥„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
    if (historyListElement) {
        historyListElement.innerHTML = '';
        
        // ÊúÄÊñ∞10‰ª∂„ÇíË°®Á§∫
        gameState.messageHistory.slice(-10).forEach(msg => {
            const item = document.createElement('div');
            item.className = 'message-history-item';
            
            // Êïµ„ÅÆË°åÂãï„ÅãÂà§ÂÆö
            if (msg.text.includes('Êïµ„ÅÆ') || msg.text.includes('Êïµ„Åå')) {
                item.className += ' enemy-action';
            } else if (msg.text.includes('„Åå') && msg.text.includes('„Å´') && msg.text.includes('„ÉÄ„É°„Éº„Ç∏')) {
                item.className += ' player-action';
            }
            
            item.textContent = msg.text;
            historyListElement.appendChild(item);
        });
        
        // Ëá™Âãï„Çπ„ÇØ„É≠„Éº„É´ÔºàÊúÄÊñ∞„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫Ôºâ
        historyListElement.scrollTop = historyListElement.scrollHeight;
    }
}

function canPlayCard(card) {
    return gameState.playerPP >= card.cost && hasEmptySlot(gameState.playerField);
}

function hasEmptySlot(field) {
    return field.some(slot => slot === null);
}

function playCard(card) {
    // Á©∫„Åç„Çπ„É≠„ÉÉ„Éà„Å´ÈÖçÁΩÆ
    const emptyIndex = gameState.playerField.findIndex(slot => slot === null);
    if (emptyIndex !== -1) {
        console.log('üÉè „Ç´„Éº„ÉâÂè¨Âñö:', card.name, `(„Ç≥„Çπ„Éà:${card.cost}, ÊÆã„ÇäPP:${gameState.playerPP}‚Üí${gameState.playerPP - card.cost})`);
        console.log('üìä Âè¨Âñö„Ç´„Éº„ÉâË©≥Á¥∞:', {
            ÂêçÂâç: card.name,
            Â±ûÊÄß: card.element,
            HP: card.hp,
            ÊîªÊíÉÂäõ: card.attack,
            „Çπ„Éî„Éº„Éâ: card.speed,
            ÈÖçÁΩÆ‰ΩçÁΩÆ: `„Çπ„É≠„ÉÉ„Éà${emptyIndex + 1}`
        });
        
        gameState.playerField[emptyIndex] = card;
        gameState.playerPP -= card.cost;
        gameState.playerHand = gameState.playerHand.filter(c => c.id !== card.id);
        
        // SEÂÜçÁîü: „Ç´„Éº„ÉâÂè¨Âñö
        SoundManager.play('summon');
        
        showMessage(`${card.name}„ÇíÂè¨Âñö„Åó„Åæ„Åó„ÅüÔºÅ`);
        updateDisplay();
    }
}

function startAttack(attacker) {
    console.log('‚öîÔ∏è ÊîªÊíÉÊ∫ñÂÇô:', attacker.name, '(HP:', attacker.hp, ', ÊîªÊíÉÂäõ:', attacker.attack, ')');
    gameState.attackMode = true;
    gameState.currentAttacker = attacker;
    gameState.justStartedAttack = true;
    
    // SEÂÜçÁîü: „Ç´„Éº„ÉâÈÅ∏Êäû
    SoundManager.play('select');
    
    // ÊîªÊíÉÂØæË±°„ÇíÈÅ∏Êäû„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åô„Çã
    showMessage(`${attacker.name}„ÅÆÊîªÊíÉÂØæË±°„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàÊïµ„Ç´„Éº„Éâ‰ª•Â§ñ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åß„Ç≠„É£„É≥„Çª„É´Ôºâ`);
    
    // Êïµ„Ç´„Éº„Éâ„Å´‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏„ÇíË°®Á§∫ÔºàÁµ±Âêà„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥„Åß‰ª£ÊõøÔºâ
    // showDamagePreview(attacker);
    
    // Â∞ë„ÅóÈÅÖÂª∂„Åó„Å¶„Åã„Çâ„Ç≠„É£„É≥„Çª„É´„É™„Çπ„Éä„Éº„ÇíË®≠ÂÆö
    setTimeout(() => {
        console.log('‚úÖ „Ç≠„É£„É≥„Çª„É´„É™„Çπ„Éä„ÉºË®≠ÂÆöÂÆå‰∫Ü - ËÉåÊôØ„ÇØ„É™„ÉÉ„ÇØ„ÅßÊîªÊíÉ„Ç≠„É£„É≥„Çª„É´ÂèØËÉΩ');
        gameState.justStartedAttack = false;
        document.addEventListener('click', handleAttackCancelClick);
    }, 100);
    
    // ÊîªÊíÉ„É¢„Éº„Éâ‰∏≠„ÅØÊïµ„Éï„Ç£„Éº„É´„Éâ„ÅÆ„ÅøÊõ¥Êñ∞Ôºà‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏„Çí‰øùÊåÅ„Åô„Çã„Åü„ÇÅÔºâ
    if (gameState.attackMode) {
        updateEnemyFieldOnly();
    } else {
        updateDisplay();
    }
}

// ÊïµË°åÂãï„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Áµ±‰∏ÄÈñ¢Êï∞
function applyEnemyActionAnimation(cardElement, cardName) {
    cardElement.classList.add('selectable'); // pulse„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Áµ±‰∏Ä
    console.log('üéØ ÊïµË°åÂãï„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈÅ©Áî®:', cardName);
}

// ‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏Ë°®Á§∫
function showDamagePreview(attacker) {
    console.log('üéØ showDamagePreview ÈñãÂßã:', attacker.name);
    
    gameState.enemyField.forEach((enemy, index) => {
        if (enemy) {
            const damageInfo = calculateElementalDamage(attacker, enemy);
            const canKill = enemy.hp <= damageInfo.damage;
            
            // Êïµ„Ç´„Éº„Éâ„ÅÆDOMË¶ÅÁ¥†„ÇíÂèñÂæó
            const slot = document.getElementById(`enemy-slot-${index}`);
            const enemyCardElement = slot ? slot.querySelector('.card') : null;
            
            console.log(`üîç [${index}] ${enemy.name}:`, enemyCardElement ? '„Ç´„Éº„ÉâË¶ÅÁ¥†„ÅÇ„Çä' : '„Ç´„Éº„ÉâË¶ÅÁ¥†„Å™„Åó');
            
            // DOMÊßãÈÄ†„ÅÆË©≥Á¥∞Ë™øÊüª
            if (enemyCardElement) {
                console.log(`üèóÔ∏è [${index}] DOMÊßãÈÄ†:`, {
                    '„Ç´„Éº„ÉâË¶ÅÁ¥†': enemyCardElement.tagName,
                    '„Ç´„Éº„Éâ„ÇØ„É©„Çπ': enemyCardElement.className,
                    '„Ç´„Éº„ÉâID': enemyCardElement.id,
                    'Ë¶™Ë¶ÅÁ¥†': enemyCardElement.parentElement?.tagName,
                    'Ë¶™„ÇØ„É©„Çπ': enemyCardElement.parentElement?.className,
                    'Â≠êË¶ÅÁ¥†Êï∞': enemyCardElement.children.length,
                    'Â≠êË¶ÅÁ¥†„É™„Çπ„Éà': Array.from(enemyCardElement.children).map(child => child.className)
                });
            }
            
            if (enemyCardElement) {
                // Êó¢Â≠ò„ÅÆ‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏Ë°®Á§∫„ÇíÂâäÈô§
                const existingPreview = enemyCardElement.querySelector('.damage-preview');
                if (existingPreview) {
                    existingPreview.remove();
                }
                
                // ‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏Ë¶ÅÁ¥†„Çí‰ΩúÊàê
                const previewElement = document.createElement('div');
                previewElement.className = 'damage-preview';
                previewElement.innerHTML = canKill ? 
                    `-${damageInfo.damage} üíÄ` : 
                    `-${damageInfo.damage}`;
                
                // „Éá„Éê„ÉÉ„Ç∞Áî®: ‰∏ÄÊôÇÁöÑ„Å´ÁõÆÁ´ã„Å§„Çπ„Çø„Ç§„É´„ÇíËøΩÂä†
                previewElement.style.cssText = `
                    position: absolute !important;
                    top: 10px !important;
                    left: 10px !important;
                    background: red !important;
                    color: white !important;
                    padding: 10px !important;
                    z-index: 9999 !important;
                    font-size: 16px !important;
                    border: 3px solid yellow !important;
                    transform: none !important;
                `;
                
                // „Ç´„Éº„Éâ„Å´ËøΩÂä†Ôºàcard-content-verticalÂÜÖ„Å´„ÇÇË©¶„ÅôÔºâ
                const cardContent = enemyCardElement.querySelector('.card-content-vertical');
                if (cardContent) {
                    console.log(`üì¶ [${index}] card-content-verticalÂÜÖ„Å´ËøΩÂä†„ÉÜ„Çπ„Éà`);
                    
                    // card-content-vertical„ÅÆCSSÂà∂Èôê„ÇíË™øÊüª
                    const cardContentStyle = getComputedStyle(cardContent);
                    console.log(`üé® [${index}] card-content-vertical„ÅÆCSS:`, {
                        overflow: cardContentStyle.overflow,
                        position: cardContentStyle.position,
                        zIndex: cardContentStyle.zIndex,
                        display: cardContentStyle.display,
                        visibility: cardContentStyle.visibility
                    });
                    
                    cardContent.appendChild(previewElement);
                    
                    // „Ç≤„Éº„É†„Ç≥„É≥„ÉÜ„Éä„Å´‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏„ÇíÁµ∂ÂØæ‰ΩçÁΩÆ„ÅßË°®Á§∫ÔºàËß£Ê±∫Ê°àÔºâ
                    const gameContainer = document.getElementById('game-container');
                    const cardRect = enemyCardElement.getBoundingClientRect();
                    const gameRect = gameContainer.getBoundingClientRect();
                    
                    const damageDisplayElement = document.createElement('div');
                    damageDisplayElement.className = 'damage-preview-overlay';
                    damageDisplayElement.innerHTML = canKill ? 
                        `-${damageInfo.damage} üíÄ` : 
                        `-${damageInfo.damage}`;
                    damageDisplayElement.style.cssText = `
                        position: absolute !important;
                        top: ${cardRect.top - gameRect.top + cardRect.height * 0.65}px !important;
                        left: ${cardRect.left - gameRect.left + cardRect.width * 0.5 - 24}px !important;
                        background: rgba(220, 53, 69, 0.95) !important;
                        color: white !important;
                        padding: 6px 12px !important;
                        border-radius: 16px !important;
                        font-size: 14px !important;
                        font-weight: bold !important;
                        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.8) !important;
                        border: 2px solid rgba(255, 255, 255, 0.3) !important;
                        z-index: 1000 !important;
                        animation: damagePreviewPulse 1.5s ease-in-out infinite !important;
                        pointer-events: none !important;
                    `;
                    
                    if (gameContainer) {
                        gameContainer.appendChild(damageDisplayElement);
                        console.log(`‚ú® [${index}] ‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏„Çí„Ç≤„Éº„É†„Ç≥„É≥„ÉÜ„Éä„Å´Ë°®Á§∫`);
                    }
                } else {
                    console.log(`üì¶ [${index}] cardË¶ÅÁ¥†„Å´Áõ¥Êé•ËøΩÂä†`);
                    enemyCardElement.appendChild(previewElement);
                }
                
                // ÊúÄÁµÇ„ÉÜ„Çπ„Éà: body„Å´Áõ¥Êé•ËøΩÂä†
                const bodyTestElement = document.createElement('div');
                bodyTestElement.innerHTML = `„ÉÜ„Çπ„Éà: ${enemy.name}`;
                bodyTestElement.style.cssText = `
                    position: fixed !important;
                    top: 50px !important;
                    left: 50px !important;
                    background: blue !important;
                    color: white !important;
                    padding: 20px !important;
                    z-index: 99999 !important;
                    font-size: 20px !important;
                    border: 5px solid orange !important;
                `;
                document.body.appendChild(bodyTestElement);
                console.log('üß™ body„ÉÜ„Çπ„ÉàË¶ÅÁ¥†ËøΩÂä†:', bodyTestElement);
                
                console.log('üí≠ ‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏Ë°®Á§∫:', enemy.name, `‚Üí ${damageInfo.damage}„ÉÄ„É°„Éº„Ç∏`, canKill ? '(ÊíÉÁ†¥ÂèØËÉΩüíÄ)' : '');
                
                // ËøΩÂä†Âæå„ÅÆÁ¢∫Ë™ç
                const addedElement = enemyCardElement.querySelector('.damage-preview');
                console.log(`‚úÖ [${index}] ËøΩÂä†Á¢∫Ë™ç:`, addedElement ? 'Â≠òÂú®„Åô„Çã' : 'Â≠òÂú®„Åó„Å™„ÅÑ');
                
                // 3ÁßíÂæå„Å´ÂÜçÁ¢∫Ë™ç
                setTimeout(() => {
                    const stillExists = enemyCardElement.querySelector('.damage-preview');
                    console.log(`‚è∞ [${index}] 3ÁßíÂæåÁ¢∫Ë™ç:`, stillExists ? 'Â≠òÂú®„Åô„Çã' : 'ÂâäÈô§„Åï„Çå„Åü');
                    if (!stillExists) {
                        console.log('üö® Ë¶ÅÁ¥†„ÅåÂâäÈô§„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
                    }
                }, 3000);
                if (addedElement) {
                    const rect = addedElement.getBoundingClientRect();
                    const parentRect = enemyCardElement.getBoundingClientRect();
                    console.log(`üîç [${index}] CSSÁ¢∫Ë™ç:`, {
                        display: getComputedStyle(addedElement).display,
                        visibility: getComputedStyle(addedElement).visibility,
                        opacity: getComputedStyle(addedElement).opacity,
                        zIndex: getComputedStyle(addedElement).zIndex,
                        position: getComputedStyle(addedElement).position,
                        width: addedElement.offsetWidth + 'px',
                        height: addedElement.offsetHeight + 'px'
                    });
                    console.log(`üìç [${index}] ‰ΩçÁΩÆÊÉÖÂ†±:`, {
                        'Ë¶ÅÁ¥†‰ΩçÁΩÆ': `x:${rect.left.toFixed(1)}, y:${rect.top.toFixed(1)}`,
                        'Ë¶™„Ç´„Éº„Éâ‰ΩçÁΩÆ': `x:${parentRect.left.toFixed(1)}, y:${parentRect.top.toFixed(1)}`,
                        'Ë¶™„Ç´„Éº„Éâ„Çµ„Ç§„Ç∫': `${parentRect.width.toFixed(1)}√ó${parentRect.height.toFixed(1)}`,
                        'ÁîªÈù¢ÂÜÖÂà§ÂÆö': rect.left >= 0 && rect.top >= 0 && rect.right <= window.innerWidth && rect.bottom <= window.innerHeight ? 'ÁîªÈù¢ÂÜÖ' : 'ÁîªÈù¢Â§ñ'
                    });
                }
            }
        }
    });
    
    console.log('üéØ showDamagePreview ÂÆå‰∫Ü');
}

// ‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏Ë°®Á§∫„ÇíÂâäÈô§
function hideDamagePreview() {
    // ÂÖÉ„ÅÆ„Ç´„Éº„ÉâÂÜÖË¶ÅÁ¥†„ÇíÂâäÈô§
    document.querySelectorAll('.damage-preview').forEach(element => {
        element.remove();
    });
    // „Ç≤„Éº„É†„Ç≥„É≥„ÉÜ„ÉäÂÜÖ„ÅÆ„Ç™„Éº„Éê„Éº„É¨„Ç§Ë¶ÅÁ¥†„ÇÇÂâäÈô§
    document.querySelectorAll('.damage-preview-overlay').forEach(element => {
        element.remove();
    });
    console.log('üßπ ‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏ÂÖ®ÂâäÈô§Ôºà„Ç™„Éº„Éê„Éº„É¨„Ç§Âê´„ÇÄÔºâ');
}

function handleAttackCancelClick(event) {
    console.log('üñ±Ô∏è „ÇØ„É™„ÉÉ„ÇØÊ§úÂá∫:', event.target.tagName, '(', event.target.className, ')');
    
    // ÊîªÊíÉ„É¢„Éº„Éâ„Åß„Å™„ÅÑÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ
    if (!gameState.attackMode) {
        console.log('‚ö†Ô∏è ÊîªÊíÉ„É¢„Éº„Éâ„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì - „Ç≠„É£„É≥„Çª„É´Âá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó');
        return;
    }
    
    // ÊîªÊíÉÈñãÂßãÁõ¥Âæå„ÅÆÂ†¥Âêà„ÅØ„Ç≠„É£„É≥„Çª„É´„Åó„Å™„ÅÑ
    if (gameState.justStartedAttack) {
        console.log('‚è±Ô∏è ÊîªÊíÉÈñãÂßãÁõ¥Âæå„ÅÆ„Åü„ÇÅ - „Ç≠„É£„É≥„Çª„É´Âá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó');
        return;
    }
    
    // „ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„ÅüË¶ÅÁ¥†„ÅåÊïµ„Ç´„Éº„ÉâÔºàselectable-targetÔºâ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    const clickedElement = event.target;
    const isEnemyCard = clickedElement.closest('.selectable-target');
    
    console.log('üîç „ÇØ„É™„ÉÉ„ÇØË¶ÅÁ¥†Âà§ÂÆö:', isEnemyCard ? 'Êïµ„Ç´„Éº„Éâ' : '„Åù„ÅÆ‰ªñ');
    
    // Êïµ„Ç´„Éº„Éâ„Åß„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç≠„É£„É≥„Çª„É´
    if (!isEnemyCard) {
        console.log('‚ùå ÊîªÊíÉ„Ç≠„É£„É≥„Çª„É´: Êïµ„Ç´„Éº„Éâ‰ª•Â§ñ„Çí„ÇØ„É™„ÉÉ„ÇØ');
        cancelAttack();
    } else {
        console.log('‚úÖ Êïµ„Ç´„Éº„Éâ„ÇØ„É™„ÉÉ„ÇØ - ÊîªÊíÉÁ∂öË°å');
    }
}

function cancelAttack() {
    gameState.attackMode = false;
    gameState.currentAttacker = null;
    gameState.justStartedAttack = false;
    
    // ‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏Ë°®Á§∫„ÇíÂâäÈô§
    hideDamagePreview();
    
    // ÂÖ®‰Ωì„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇíÂâäÈô§
    document.removeEventListener('click', handleAttackCancelClick);
    
    showMessage('ÊîªÊíÉ„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü');
    updateDisplay();
}

// ‰∫îË°åÁõ∏Ââã„ÉÄ„É°„Éº„Ç∏Ë®àÁÆó
function calculateElementalDamage(attacker, target) {
    const baseDamage = Math.max(1, attacker.attack);
    
    // Áõ∏ÂâãÈñ¢‰øÇ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    if (elementalEffectiveness[attacker.element] === target.element) {
        const elementalBonus = attacker.cost === 1 ? 3 : 5;
        return {
            damage: baseDamage + elementalBonus,
            isEffective: true,
            bonus: elementalBonus,
            message: `${attacker.element}„Åå${target.element}„Å´ÂäπÊûúÁöÑÔºÅ`
        };
    }
    
    return {
        damage: baseDamage,
        isEffective: false,
        bonus: 0,
        message: null
    };
}

// ÂêåÈÄüÁõ∏Êâì„Å°Âà§ÂÆö„Å®„ÉÄ„É°„Éº„Ç∏Âá¶ÁêÜ
function processSimultaneousCombat(attacker, target) {
    console.log('‚ö° ÂêåÈÄüÁõ∏Êâì„Å°Áô∫Áîü:', `${attacker.name}(ÈÄüÂ∫¶:${attacker.speed}) vs ${target.name}(ÈÄüÂ∫¶:${target.speed})`);
    
    // üí• Áõ∏Êâì„Å°„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈñãÂßã
    gameState.simultaneousCombatCards = [attacker, target];
    console.log('üí• Áõ∏Êâì„Å°„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈñãÂßã:', attacker.name, 'vs', target.name);
    
    // ‰∏°Êñπ„ÅÆ„ÉÄ„É°„Éº„Ç∏„ÇíË®àÁÆó
    const attackerDamage = calculateElementalDamage(attacker, target);
    const counterDamage = calculateElementalDamage(target, attacker);
    
    // ÂÖÉ„ÅÆHPË®òÈå≤
    const attackerOriginalHp = attacker.hp;
    const targetOriginalHp = target.hp;
    
    // ÂêåÊôÇ„ÉÄ„É°„Éº„Ç∏ÈÅ©Áî®
    attacker.hp -= counterDamage.damage;
    target.hp -= attackerDamage.damage;
    
    console.log('üí• Áõ∏Êâì„Å°„ÉÄ„É°„Éº„Ç∏Ë©≥Á¥∞:', {
        [`${attacker.name}„Åå‰∏é„Åà„Çã„ÉÄ„É°„Éº„Ç∏`]: `${attackerDamage.damage} (${attackerDamage.isEffective ? 'ÂäπÊûúÁöÑ' : 'ÈÄöÂ∏∏'})`,
        [`${target.name}„Åå‰∏é„Åà„Çã„ÉÄ„É°„Éº„Ç∏`]: `${counterDamage.damage} (${counterDamage.isEffective ? 'ÂäπÊûúÁöÑ' : 'ÈÄöÂ∏∏'})`,
        [`${attacker.name}„ÅÆHP`]: `${attackerOriginalHp} ‚Üí ${attacker.hp}`,
        [`${target.name}„ÅÆHP`]: `${targetOriginalHp} ‚Üí ${target.hp}`
    });
    
    // ‰∏°Êñπ„Å®„ÇÇË°åÂãïÊ∏à„Åø„Å´„Éû„Éº„ÇØ
    attacker.hasActed = true;
    target.hasActed = true;
    
    // SEÂÜçÁîü: ÊîªÊíÉ
    SoundManager.play('attack');
    
    // Áõ∏Êâì„Å°„Ç®„Éï„Çß„ÇØ„ÉàË°®Á§∫
    showSlashEffect(target, attackerDamage.isEffective, attacker.element);
    showSlashEffect(attacker, counterDamage.isEffective, target.element);
    
    // „ÉÄ„É°„Éº„Ç∏„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÔºàÂ∞ë„ÅóÈÅÖÂª∂„Åó„Å¶ÂêåÊôÇË°®Á§∫Ôºâ
    setTimeout(() => {
        showDamageAnimation(target, attackerDamage, attacker.element);
        showDamageAnimation(attacker, counterDamage, target.element);
    }, 150);
    
    // Áõ∏Êâì„Å°„É°„ÉÉ„Çª„Éº„Ç∏
    let message = '‚ö° Áõ∏Êâì„Å°ÔºÅ ';
    if (attackerDamage.isEffective || counterDamage.isEffective) {
        const effectMessages = [];
        if (attackerDamage.isEffective) effectMessages.push(attackerDamage.message);
        if (counterDamage.isEffective) effectMessages.push(counterDamage.message);
        message += effectMessages.join(' / ') + ' ';
    }
    const attackerText = attackerDamage.isEffective ? `${attackerDamage.damage}(+${attackerDamage.bonus})` : attackerDamage.damage;
    const counterText = counterDamage.isEffective ? `${counterDamage.damage}(+${counterDamage.bonus})` : counterDamage.damage;
    message += `${attacker.name}‚öîÔ∏è${target.name} ÂêåÊôÇ${attackerText}/${counterText}„ÉÄ„É°„Éº„Ç∏ÔºÅ`;
    showMessage(message);
    
    // ÊíÉÁ†¥Âà§ÂÆöÔºàÂêåÊôÇÊíÉÁ†¥„ÅÆÂèØËÉΩÊÄßÔºâ
    const attackerDefeated = attacker.hp <= 0;
    const targetDefeated = target.hp <= 0;
    
    return {
        attackerDefeated,
        targetDefeated,
        attackerDamage: attackerDamage.damage,
        counterDamage: counterDamage.damage
    };
}

function executeAttack(attacker, target) {
    console.log('‚öîÔ∏è ÊîªÊíÉÂÆüË°å:', attacker.name, '‚Üí', target.name);
    console.log('üí• Êà¶ÈóòË©≥Á¥∞:', {
        ÊîªÊíÉËÄÖ: `${attacker.name} (${attacker.element}Â±ûÊÄß, ÊîªÊíÉÂäõ: ${attacker.attack}, ÈÄüÂ∫¶: ${attacker.speed})`,
        ÂØæË±°: `${target.name} (${target.element}Â±ûÊÄß, HP: ${target.hp}, ÈÄüÂ∫¶: ${target.speed})`
    });
    
    // ‰∫àÊ∏¨„ÉÄ„É°„Éº„Ç∏Ë°®Á§∫„ÇíÂâäÈô§
    hideDamagePreview();
    
    if (gameState.attackMode) {
        // üéØ „Éó„É¨„Ç§„É§„ÉºÂÖàË°åÂà∂: ÂêåÈÄüÂ∫¶„Åß„ÇÇ„Éó„É¨„Ç§„É§„Éº„ÅåÂÖà„Å´Ë°åÂãï
        console.log('üë§ „Éó„É¨„Ç§„É§„ÉºÊîªÊíÉÂÆüË°å (ÂêåÈÄüÂ∫¶„Åß„ÇÇÂÖàË°å)');
        
        // ÈÄöÂ∏∏ÊîªÊíÉÔºàÈÄüÂ∫¶„ÅåÁï∞„Å™„Çã„ÄÅ„Åæ„Åü„ÅØÂØæË±°„ÅåÊó¢„Å´Ë°åÂãïÊ∏à„ÅøÔºâ
        const damageInfo = calculateElementalDamage(attacker, target);
        const originalHp = target.hp;
        target.hp -= damageInfo.damage;
        attacker.hasActed = true;
        
        console.log(`üí¢ „ÉÄ„É°„Éº„Ç∏Âá¶ÁêÜ: ${damageInfo.damage}„ÉÄ„É°„Éº„Ç∏ (ÂäπÊûúÁöÑ: ${damageInfo.isEffective}) ‚Üí HP ${originalHp}‚Üí${target.hp}`);
        
        // SEÂÜçÁîü: ÊîªÊíÉ
        SoundManager.play('attack');
        
        // „Çπ„É©„ÉÉ„Ç∑„É•„Ç®„Éï„Çß„ÇØ„ÉàË°®Á§∫ÔºàÊîªÊíÉÈñãÂßãÔºâ
        showSlashEffect(target, damageInfo.isEffective, attacker.element);
        
        // „ÉÄ„É°„Éº„Ç∏„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ë°®Á§∫ÔºàÂ∞ë„ÅóÈÅÖÂª∂Ôºâ
        setTimeout(() => {
            showDamageAnimation(target, damageInfo, attacker.element);
        }, 150);
        
        // Áõ∏ÂâãÂäπÊûú„Å´Âøú„Åò„Åü„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
        if (damageInfo.isEffective) {
            showMessage(`üî• ${damageInfo.message} ${attacker.name}„Åå${target.name}„Å´${damageInfo.damage}„ÉÄ„É°„Éº„Ç∏(+${damageInfo.bonus})ÔºÅ`);
        } else {
            showMessage(`‚öîÔ∏è ${attacker.name}„Åå${target.name}„Å´${damageInfo.damage}„ÉÄ„É°„Éº„Ç∏ÔºÅ`);
        }
        
        // HP„ÉÅ„Çß„ÉÉ„ÇØ„ÅØÂç≥Â∫ß„Å´Ë°å„ÅÑ„ÄÅÊíÉÁ†¥Âá¶ÁêÜ„ÅØ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Âæå„Å´ÈÅÖÂª∂ÂÆüË°å
        const isDefeated = target.hp <= 0;
        if (isDefeated) {
            console.log('üíÄ „Ç´„Éº„ÉâÊíÉÁ†¥‰∫àÂÆö:', target.name, '„ÅÆHP„Åå0‰ª•‰∏ã ‚Üí „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Âæå„Å´ÊíÉÁ†¥Âá¶ÁêÜ');
            
            // „ÉÄ„É°„Éº„Ç∏„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫ÜÂæå„Å´„Ç´„Éº„ÉâÊíÉÁ†¥Âá¶ÁêÜ
            setTimeout(() => {
                if (target.hp <= 0) { // Âøµ„ÅÆ„Åü„ÇÅÂÜç„ÉÅ„Çß„ÉÉ„ÇØ
                    defeatCard(target);
                }
            }, 1200); // „ÉÄ„É°„Éº„Ç∏„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÊôÇÈñì(1000ms) + ‰ΩôË£ï(200ms)
        } else {
            console.log('‚úÖ „Ç´„Éº„ÉâÁîüÂ≠ò:', target.name, `(ÊÆã„ÇäHP: ${target.hp})`);
        }
        
        // ÊîªÊíÉ„É¢„Éº„Éâ„Çí„Ç≠„É£„É≥„Çª„É´Ôºà„É°„ÉÉ„Çª„Éº„Ç∏„ÅØË°®Á§∫„Åó„Å™„ÅÑÔºâ
        gameState.attackMode = false;
        gameState.currentAttacker = null;
        
        // ÂÖ®‰Ωì„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà„ÇíÂâäÈô§
        document.removeEventListener('click', handleAttackCancelClick);
        
        updateDisplay();
        updateTurnOrderDisplay();
        
        // ÊíÉÁ†¥„Åó„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅÆ„ÅøÊà¶ÈóòÁ∂ôÁ∂ö„ÉÅ„Çß„ÉÉ„ÇØ
        if (!isDefeated) {
            setTimeout(() => {
                const victoryCheck = checkVictoryCondition();
                if (victoryCheck.result) {
                    gameOver(victoryCheck.result, victoryCheck.message, victoryCheck.sound);
                    return;
                }
                
                // Êà¶ÈóòÁ∂ôÁ∂ö„ÉÅ„Çß„ÉÉ„ÇØ
                if (checkBattleEnd()) {
                    nextPhase();
                } else {
                    // Ê¨°„ÅÆË°åÂãïËÄÖ„ÅåAI„ÅÆÂ†¥Âêà„ÄÅËá™Âãï„ÅßË°åÂãï
                    const nextCard = gameState.turnOrder.find(card => !card.hasActed);
                    if (nextCard && !nextCard.isPlayer) {
                        enemyAutoAttack(nextCard);
                    }
                }
            }, 500);
        }
    } else {
        console.log('‚ö†Ô∏è ÊîªÊíÉ„É¢„Éº„Éâ„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì - executeAttackÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„Éó');
    }
}

function enemyAutoAttack(enemyCard) {
    console.log('ü§ñ ÊïµAIË°åÂãïÈñãÂßã:', enemyCard.name, '(ÊîªÊíÉÂäõ:', enemyCard.attack, ')');
    const playerCards = gameState.playerField.filter(c => c !== null);
    console.log('üéØ ÊîªÊíÉÂèØËÉΩ„Å™„Éó„É¨„Ç§„É§„Éº„Ç´„Éº„Éâ:', playerCards.map(c => `${c.name}(HP:${c.hp})`));
    
    // ÊîªÊíÉÂØæË±°„Åå„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
    if (playerCards.length === 0) {
        console.log('‚ö†Ô∏è ÊîªÊíÉÂØæË±°„Å™„Åó - Êïµ„ÅÆË°åÂãï„Çí„Çπ„Ç≠„ÉÉ„Éó');
        enemyCard.hasActed = true;
        showMessage(`Êïµ„ÅÆ${enemyCard.name}„ÅØÊîªÊíÉÂØæË±°„Åå„ÅÑ„Å™„ÅÑ„Åü„ÇÅË°åÂãï„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü`);
        
        updateDisplay();
        updateTurnOrderDisplay();
        
        // Ê¨°„ÅÆË°åÂãïËÄÖ„Å´ÁßªË°å
        setTimeout(() => {
            if (checkBattleEnd()) {
                nextPhase();
            } else {
                const nextCard = gameState.turnOrder.find(card => !card.hasActed);
                if (nextCard && !nextCard.isPlayer) {
                    enemyAutoAttack(nextCard);
                }
            }
        }, 1500);
        return;
    }
    
    // üé¨ Stage 1: Êïµ„Ç´„Éº„Éâ„ÅÆÊîªÊíÉÂæÖÊ©ü„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ë°®Á§∫
    console.log('üé≠ ÊïµÊîªÊíÉ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈñãÂßã:', enemyCard.name);
    gameState.currentEnemyAttacker = enemyCard; // ÊîªÊíÉ‰∏≠„ÅÆÊïµ„Ç´„Éº„Éâ„ÇíË®òÈå≤
    showMessage(`ü§ñ Êïµ„ÅÆ${enemyCard.name}„ÅåÊîªÊíÉ„ÇíÊ∫ñÂÇô„Åó„Å¶„ÅÑ„Åæ„Åô...`);
    updateDisplay(); // Êïµ„Ç´„Éº„Éâ„Å´enemy-attacking„ÇØ„É©„Çπ„ÇíËøΩÂä†„Åô„Çã„Åü„ÇÅ
    
    // 1000msÂæå„Å´ÂØæË±°ÈÅ∏Êäû„Å®„É°„ÉÉ„Çª„Éº„Ç∏Êõ¥Êñ∞
    setTimeout(() => {
        // üé¨ Stage 2: ÊîªÊíÉÂØæË±°ÈÅ∏Êäû„Å®Ë°®Á§∫
        enemySelectAndShowTarget(enemyCard, playerCards);
    }, 1000);
}

// üé¨ Stage 2: Êïµ„ÅÆÊîªÊíÉÂØæË±°ÈÅ∏Êäû„Å®Ë°®Á§∫
function enemySelectAndShowTarget(enemyCard, playerCards) {
    let target;
    const randomValue = Math.random();
    
    // 90%„ÅÆÁ¢∫Áéá„ÅßÊúÄ„ÇÇHP„Åå‰Ωé„ÅÑ„Ç´„Éº„Éâ„ÇíÁãô„ÅÜ
    if (randomValue < 0.9) {
        target = playerCards.reduce((lowest, card) => 
            card.hp < lowest.hp ? card : lowest
        );
        console.log('ü§ñ AIÊà¶Áï•: ÊúÄ‰ΩéHPÁãô„ÅÑ ‚Üí', target.name, '(HP:', target.hp, ')');
    } else {
        target = playerCards[Math.floor(Math.random() * playerCards.length)];
        console.log('ü§ñ AIÊà¶Áï•: „É©„É≥„ÉÄ„É†ÈÅ∏Êäû ‚Üí', target.name, '(HP:', target.hp, ')');
    }
    
    showMessage(`üéØ Êïµ„ÅÆ${enemyCard.name}„Åå${target.name}„ÇíÁãô„Å£„Å¶„ÅÑ„Åæ„Åô...`);
    
    // 500msÂæå„Å´ÂÆüÈöõ„ÅÆÊîªÊíÉÂÆüË°å
    setTimeout(() => {
        // üé¨ Stage 3: ÊîªÊíÉÂÆüË°å
        executeEnemyAttack(enemyCard, target);
    }, 500);
}

// üé¨ Stage 3: Êïµ„ÅÆÊîªÊíÉÂÆüË°å
function executeEnemyAttack(enemyCard, target) {
    // üé¨ ÊîªÊíÉÂÆüË°åÈñãÂßã - „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Áä∂ÊÖã„Çí„ÇØ„É™„Ç¢
    gameState.currentEnemyAttacker = null;
    console.log('‚öîÔ∏è ÊïµÊîªÊíÉÂÆüË°å:', enemyCard.name, '‚Üí', target.name);
    
    // ü§ñ Êïµ„ÅØÂêåÈÄüÂ∫¶„Åß„ÇÇ„Éó„É¨„Ç§„É§„ÉºÂæåÊîª„ÅßË°åÂãï
    console.log('ü§ñ ÊïµÊîªÊíÉÂÆüË°å („Éó„É¨„Ç§„É§„Éº„ÅåÊó¢„Å´Ë°åÂãïÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅÆ„ÅøÂÆüË°å)');
    
    // ÈÄöÂ∏∏ÊîªÊíÉÔºàÈÄüÂ∫¶„ÅåÁï∞„Å™„Çã„ÄÅ„Åæ„Åü„ÅØÂØæË±°„ÅåÊó¢„Å´Ë°åÂãïÊ∏à„ÅøÔºâ
    const damageInfo = calculateElementalDamage(enemyCard, target);
    const originalHp = target.hp;
    target.hp -= damageInfo.damage;
    enemyCard.hasActed = true;
    
    console.log('‚öîÔ∏è ÊïµÊîªÊíÉÂÆüË°å:', `${enemyCard.name} ‚Üí ${target.name}`, `(${damageInfo.damage}„ÉÄ„É°„Éº„Ç∏, ÂäπÊûúÁöÑ: ${damageInfo.isEffective}, HP:${originalHp}‚Üí${target.hp})`);
    
    // SEÂÜçÁîü: Êïµ„ÅÆÊîªÊíÉ
    SoundManager.play('attack');
    
    // „Çπ„É©„ÉÉ„Ç∑„É•„Ç®„Éï„Çß„ÇØ„ÉàË°®Á§∫ÔºàÊîªÊíÉÈñãÂßãÔºâ
    showSlashEffect(target, damageInfo.isEffective, enemyCard.element);
    
    // „ÉÄ„É°„Éº„Ç∏„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ë°®Á§∫ÔºàÂ∞ë„ÅóÈÅÖÂª∂Ôºâ
    setTimeout(() => {
        showDamageAnimation(target, damageInfo, enemyCard.element);
    }, 150);
    
    // Áõ∏ÂâãÂäπÊûú„Å´Âøú„Åò„Åü„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
    if (damageInfo.isEffective) {
        showMessage(`üî• ${damageInfo.message} Êïµ„ÅÆ${enemyCard.name}„Åå${target.name}„Å´${damageInfo.damage}„ÉÄ„É°„Éº„Ç∏(+${damageInfo.bonus})ÔºÅ`);
    } else {
        showMessage(`‚öîÔ∏è Êïµ„ÅÆ${enemyCard.name}„Åå${target.name}„Å´${damageInfo.damage}„ÉÄ„É°„Éº„Ç∏ÔºÅ`);
    }
    
    // HP„ÉÅ„Çß„ÉÉ„ÇØ„ÅØÂç≥Â∫ß„Å´Ë°å„ÅÑ„ÄÅÊíÉÁ†¥Âá¶ÁêÜ„ÅØ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Âæå„Å´ÈÅÖÂª∂ÂÆüË°å
    const isDefeated = target.hp <= 0;
    if (isDefeated) {
        console.log('üíÄ Êïµ„ÅÆÊîªÊíÉ„Å´„Çà„ÇäÊíÉÁ†¥‰∫àÂÆö:', target.name, '„ÅÆHP„Åå0‰ª•‰∏ã ‚Üí „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Âæå„Å´ÊíÉÁ†¥Âá¶ÁêÜ');
        
        // „ÉÄ„É°„Éº„Ç∏„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÆå‰∫ÜÂæå„Å´„Ç´„Éº„ÉâÊíÉÁ†¥Âá¶ÁêÜ
        setTimeout(() => {
            if (target.hp <= 0) { // Âøµ„ÅÆ„Åü„ÇÅÂÜç„ÉÅ„Çß„ÉÉ„ÇØ
                defeatCard(target);
            }
        }, 1200); // „ÉÄ„É°„Éº„Ç∏„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÊôÇÈñì(1000ms) + ‰ΩôË£ï(200ms)
    } else {
        console.log('‚úÖ „Ç´„Éº„ÉâÁîüÂ≠ò:', target.name, `(ÊÆã„ÇäHP: ${target.hp})`);
    }
    
    updateDisplay();
    updateTurnOrderDisplay();
    
    // ÊíÉÁ†¥„Åó„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÅÆ„ÅøÊà¶ÈóòÁ∂ôÁ∂ö„ÉÅ„Çß„ÉÉ„ÇØ
    if (!isDefeated) {
        setTimeout(() => {
            const victoryCheck = checkVictoryCondition();
            if (victoryCheck.result) {
                gameOver(victoryCheck.result, victoryCheck.message, victoryCheck.sound);
                return;
            }
            
            // Êà¶ÈóòÁ∂ôÁ∂ö„ÉÅ„Çß„ÉÉ„ÇØ
            if (checkBattleEnd()) {
                nextPhase();
            } else {
                // Ê¨°„ÅÆË°åÂãïËÄÖ„Åå„ÅÑ„Çå„Å∞Á∂öË°å
                const nextCard = gameState.turnOrder.find(card => !card.hasActed);
                if (nextCard && !nextCard.isPlayer) {
                    enemyAutoAttack(nextCard);
                }
            }
        }, 500);
    }
}

function defeatCard(card) {
    console.log('üíÄ „Ç´„Éº„ÉâÊíÉÁ†¥Âá¶ÁêÜÈñãÂßã:', card.name, card.isPlayer ? '(„Éó„É¨„Ç§„É§„Éº)' : '(Êïµ)');
    
    if (card.isPlayer) {
        const index = gameState.playerField.findIndex(c => c && c.id === card.id);
        if (index !== -1) {
            gameState.playerField[index] = null;
            gameState.enemyDefeatedCost += card.cost;
            console.log('üèÜ Êïµ„ÅÆÂãùÂà©„Éù„Ç§„É≥„Éà:', gameState.enemyDefeatedCost, '/', 5, `(+${card.cost}„Ç≥„Çπ„Éà)`);
        }
    } else {
        const index = gameState.enemyField.findIndex(c => c && c.id === card.id);
        if (index !== -1) {
            gameState.enemyField[index] = null;
            gameState.defeatedCost += card.cost;
            console.log('üèÜ „Éó„É¨„Ç§„É§„Éº„ÅÆÂãùÂà©„Éù„Ç§„É≥„Éà:', gameState.defeatedCost, '/', 5, `(+${card.cost}„Ç≥„Çπ„Éà)`);
        }
    }
    
    showMessage(`${card.name}„ÅåÊíÉÁ†¥„Åï„Çå„Åæ„Åó„ÅüÔºÅ`);
    
    // Ë°åÂãïÈ†Ü„Åã„Çâ„ÇÇÂâäÈô§
    gameState.turnOrder = gameState.turnOrder.filter(c => c.id !== card.id);
    updateTurnOrderDisplay();
    updateDisplay(); // UIÊõ¥Êñ∞
    
    // ÊíÉÁ†¥Âæå„Å´ÂãùÊïóÂà§ÂÆö„ÇíÂÆüË°å
    setTimeout(() => {
        const victoryCheck = checkVictoryCondition();
        if (victoryCheck.result) {
            gameOver(victoryCheck.result, victoryCheck.message, victoryCheck.sound);
            return;
        }
        
        // Êà¶ÈóòÁ∂ôÁ∂ö„ÉÅ„Çß„ÉÉ„ÇØ
        if (checkBattleEnd()) {
            nextPhase();
        } else {
            // Ê¨°„ÅÆË°åÂãïËÄÖ„Å´ÁßªË°å
            const nextCard = gameState.turnOrder.find(card => !card.hasActed);
            if (nextCard && !nextCard.isPlayer) {
                enemyAutoAttack(nextCard);
            }
        }
    }, 200); // Â∞ë„ÅóÈÅÖÂª∂„Åó„Å¶ÂãùÊïóÂà§ÂÆö
    
    return false; // „Ç≤„Éº„É†Á∂öË°å
}

function checkBattleEnd() {
    // ÂÖ®„Å¶„ÅÆ„Ç´„Éº„Éâ„ÅåË°åÂãïÊ∏à„Åø„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    const allActed = gameState.turnOrder.every(card => card.hasActed);
    
    console.log('üîç Êà¶ÈóòÁµÇ‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØË©≥Á¥∞:', {
        Êà¶ÈóòÁµÇ‰∫Ü: allActed,
        Ë°åÂãïÈ†ÜÁ∑èÊï∞: gameState.turnOrder.length,
        Ë°åÂãïÊ∏à„ÅøÊï∞: gameState.turnOrder.filter(card => card.hasActed).length,
        Êú™Ë°åÂãï„Ç´„Éº„Éâ: gameState.turnOrder.filter(card => !card.hasActed).map(card => `${card.name}(${card.isPlayer ? '„Éó„É¨„Ç§„É§„Éº' : 'Êïµ'})`)
    });
    
    if (allActed) {
        console.log('‚úÖ ÂÖ®Âì°Ë°åÂãïÂÆå‰∫Ü - „Çø„Éº„É≥ÁµÇ‰∫ÜÂá¶ÁêÜ„Å∏');
        showMessage('ÂÖ®Âì°„ÅÆË°åÂãï„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ„Çø„Éº„É≥ÁµÇ‰∫Ü„Åó„Åæ„Åô„ÄÇ');
    } else {
        console.log('‚è≥ „Åæ„Å†Êú™Ë°åÂãï„ÅÆ„Ç´„Éº„Éâ„Åå„ÅÇ„Çä„Åæ„Åô');
    }
    
    return allActed;
}

function updateTurnOrderDisplay() {
    // Ë°åÂãïÈ†ÜUIÊõ¥Êñ∞Èñ¢Êï∞
    // FF10È¢®„ÅÆË°åÂãïÈ†ÜË°®Á§∫ÔºàÂÖ®„Ç´„Éº„ÉâË°®Á§∫„ÄÅË°åÂãïÊ∏à„Åø„ÅØ„Ç∞„É¨„Éº„Ç¢„Ç¶„ÉàÔºâ
    const turnOrderElement = document.getElementById('turn-order');
    if (turnOrderElement) {
        turnOrderElement.innerHTML = '';
        const unactedCards = gameState.turnOrder.filter(card => !card.hasActed);
        
        // ÂÖ®„Ç´„Éº„Éâ„ÇíË°®Á§∫
        gameState.turnOrder.forEach((card, globalIndex) => {
            const cardElement = document.createElement('div');
            cardElement.className = `turn-order-mini ${card.isPlayer ? 'player-mini' : 'enemy-mini'}`;
            
            // Ë°åÂãïÊ∏à„Åø„Ç´„Éº„Éâ„ÅØ„Ç∞„É¨„Éº„Ç¢„Ç¶„Éà„ÇØ„É©„Çπ„ÇíËøΩÂä†
            if (card.hasActed) {
                cardElement.classList.add('acted');
            }
            
            // Â±ûÊÄß„Ç¢„Ç§„Ç≥„É≥„Éª„Ç´„Éº„ÉâÂêç„ÉªÈÄüÂ∫¶„Çí„Ç≥„É≥„Éë„ÇØ„ÉàË°®Á§∫
            const elementIcon = elementIcons[card.element];
            
            cardElement.innerHTML = `
                ${elementIcon}${card.name}
                <span class="element-cost-overlay">
                    <span class="element-icon">‚ö°</span>
                    <span class="cost-number">${card.speed}</span>
                </span>
            `;
            
            // ÁèæÂú®Ë°åÂãï‰∏≠„ÅÆ„Ç´„Éº„Éâ„Çí„Éè„Ç§„É©„Ç§„ÉàÔºàÊú™Ë°åÂãï„ÅÆÊúÄÂàù„ÅÆ„Ç´„Éº„ÉâÔºâ
            const unactedIndex = unactedCards.findIndex(unactedCard => unactedCard === card);
            if (unactedIndex === 0) {
                cardElement.classList.add('current-turn');
                // „Çπ„ÇØ„É≠„Éº„É´Ê©üËÉΩ‰∏ÄÊôÇÂÅúÊ≠¢
                // setTimeout(() => {
                //     cardElement.scrollIntoView({
                //         behavior: 'smooth',
                //         block: 'nearest'
                //     });
                // }, 100);
            }
            
            turnOrderElement.appendChild(cardElement);
        });
        
        console.log('üîç Ë°åÂãïÈ†ÜË°®Á§∫Êõ¥Êñ∞:', {
            Á∑è„Ç´„Éº„ÉâÊï∞: gameState.turnOrder.length,
            Ë°åÂãïÊ∏à„ÅøÊï∞: gameState.turnOrder.filter(card => card.hasActed).length,
            Êú™Ë°åÂãïÊï∞: unactedCards.length,
            ÁèæÂú®Ë°åÂãïËÄÖ: unactedCards[0]?.name || '„Å™„Åó'
        });
    }
}

// „Éï„Çß„Éº„Ç∫„Éù„ÉÉ„Éó„Ç¢„ÉÉ„ÉóË°®Á§∫Èñ¢Êï∞
function showPhasePopup(phaseName) {
    const phaseData = {
        'start': { icon: 'üåÖ', text: '„Çø„Éº„É≥ÈñãÂßã' },
        'summon': { icon: 'üì¶', text: 'Âè¨Âñö„Éï„Çß„Éº„Ç∫' },
        'battle': { icon: '‚öîÔ∏è', text: 'Êà¶Èóò„Éï„Çß„Éº„Ç∫' },
        'end': { icon: 'üèÅ', text: '„Çø„Éº„É≥ÁµÇ‰∫Ü' }
    };

    const data = phaseData[phaseName];
    if (!data) return;

    const modal = document.getElementById('phase-popup-modal');
    const icon = document.getElementById('phase-popup-icon');
    const text = document.getElementById('phase-popup-text');
    const content = modal.querySelector('.phase-popup-content');

    icon.textContent = data.icon;
    text.textContent = data.text;

    // „É¢„Éº„ÉÄ„É´Ë°®Á§∫
    modal.style.display = 'flex';
    
    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈñãÂßã
    setTimeout(() => {
        content.classList.add('show');
    }, 50);

    // 0.8ÁßíÂæå„Å´Ëá™Âãï„ÅßÈñâ„Åò„Çã
    setTimeout(() => {
        content.classList.remove('show');
        setTimeout(() => {
            modal.style.display = 'none';
        }, 400);
    }, 800);

    console.log('üìã „Éï„Çß„Éº„Ç∫„Éù„ÉÉ„Éó„Ç¢„ÉÉ„ÉóË°®Á§∫:', data.text);
}

function nextPhase() {
    const previousPhase = gameState.phase;
    console.log('üîÑ „Éï„Çß„Éº„Ç∫ÈÅ∑ÁßªÈñãÂßã:', {
        ÁèæÂú®„Éï„Çß„Éº„Ç∫: previousPhase,
        „Çø„Éº„É≥: gameState.turn,
        „Éó„É¨„Ç§„É§„Éº„Éï„Ç£„Éº„É´„Éâ: gameState.playerField.filter(c => c).map(c => c.name),
        Êïµ„Éï„Ç£„Éº„É´„Éâ: gameState.enemyField.filter(c => c).map(c => c.name),
        „É≠„Ç∞Ë®òÈå≤ÊôÇÂàª: new Date().toLocaleTimeString()
    });
    
    switch (gameState.phase) {
        case 'draw':
            gameState.phase = 'summon';
            showPhasePopup('summon');
            console.log('üì¶ Âè¨Âñö„Éï„Çß„Éº„Ç∫„Å´ÈÅ∑Áßª:', {
                „Éó„É¨„Ç§„É§„ÉºPP: gameState.playerPP,
                „Éó„É¨„Ç§„É§„ÉºÊâãÊú≠Êï∞: gameState.playerHand.length,
                ÊïµPP: gameState.enemyPP,
                ÊïµÊâãÊú≠Êï∞: gameState.enemyHand.length
            });
            showMessage('Âè¨Âñö„Éï„Çß„Éº„Ç∫Ôºö„Ç´„Éº„Éâ„ÇíÈÖçÁΩÆ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            break;
        case 'summon':
            console.log('‚öîÔ∏è Êà¶Èóò„Éï„Çß„Éº„Ç∫„Å´ÈÅ∑ÁßªÈñãÂßã:', {
                „Éó„É¨„Ç§„É§„Éº„Éï„Ç£„Éº„É´„ÉâÁä∂Ê≥Å: gameState.playerField.map((c, i) => 
                    c ? `„Çπ„É≠„ÉÉ„Éà${i}: ${c.name}(HP:${c.hp})` : `„Çπ„É≠„ÉÉ„Éà${i}: Á©∫`),
                Êïµ„Éï„Ç£„Éº„É´„ÉâÁä∂Ê≥Å: gameState.enemyField.map((c, i) => 
                    c ? `„Çπ„É≠„ÉÉ„Éà${i}: ${c.name}(HP:${c.hp})` : `„Çπ„É≠„ÉÉ„Éà${i}: Á©∫`)
            });
            // Âè¨Âñö„Éï„Çß„Éº„Ç∫ÂÆå‰∫ÜÂæå„ÄÅÊïµAIÂè¨Âñö
            enemyAISummon();
            gameState.phase = 'battle';
            showPhasePopup('battle');
            console.log('‚öîÔ∏è Êà¶Èóò„Éï„Çß„Éº„Ç∫ÈÅ∑ÁßªÂÆå‰∫Ü - prepareBattleÂÆüË°åÈñãÂßã');
            prepareBattle();
            break;
        case 'battle':
            console.log('üèÅ „Çø„Éº„É≥ÁµÇ‰∫ÜÂá¶ÁêÜÈñãÂßã:', {
                ÂÆå‰∫Ü„Çø„Éº„É≥: gameState.turn,
                „Éó„É¨„Ç§„É§„ÉºÊíÉÁ†¥Êï∞: gameState.defeatedCost,
                ÊïµÊíÉÁ†¥Êï∞: gameState.enemyDefeatedCost
            });
            gameState.phase = 'end';
            endTurn();
            break;
    }
    
    console.log('‚úÖ „Éï„Çß„Éº„Ç∫ÈÅ∑ÁßªÂÆå‰∫Ü:', {
        Ââç„Éï„Çß„Éº„Ç∫: previousPhase,
        Êñ∞„Éï„Çß„Éº„Ç∫: gameState.phase,
        Âá¶ÁêÜÂÆå‰∫ÜÊôÇÂàª: new Date().toLocaleTimeString()
    });
    updateDisplay();
}

function prepareBattle() {
    // Êà¶ÈóòÊ∫ñÂÇôÔºöÂÖ®„Ç´„Éº„Éâ„Çí„Çπ„Éî„Éº„ÉâÈ†Ü„Åß„ÇΩ„Éº„Éà
    const allCards = [
        ...gameState.playerField.filter(c => c !== null),
        ...gameState.enemyField.filter(c => c !== null)
    ];
    
    gameState.turnOrder = allCards.sort((a, b) => b.speed - a.speed);
    
    // Ë°åÂãï„Éï„É©„Ç∞„Çí„É™„Çª„ÉÉ„Éà
    gameState.turnOrder.forEach(card => {
        card.hasActed = false;
    });
    
    showMessage('Êà¶Èóò„Éï„Çß„Éº„Ç∫Ôºö„Ç´„Éº„Éâ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶ÊîªÊíÉ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    updateTurnOrderDisplay();
    
    // ÊúÄÂàù„ÅÆË°åÂãïËÄÖ„ÅåÊïµ„ÅÆÂ†¥Âêà„ÄÅËá™Âãï„ÅßÊîªÊíÉÈñãÂßã
    const firstCard = gameState.turnOrder.find(card => !card.hasActed);
    if (firstCard && !firstCard.isPlayer) {
        setTimeout(() => {
            enemyAutoAttack(firstCard);
        }, 1000);
    }
}

function endTurn() {
    // ÂãùÊïóÂà§ÂÆöÔºà„Çø„Éº„É≥ÁµÇ‰∫ÜÊôÇ„Å´„Ç¨„É©Á©∫„Åç„ÉÅ„Çß„ÉÉ„ÇØ„ÅÆ„ÅøÔºâ
    const victoryCheck = checkVictoryCondition();
    if (victoryCheck.result) {
        gameOver(victoryCheck.result, victoryCheck.message, victoryCheck.sound);
        return;
    }
    
    // Ê¨°„ÅÆ„Çø„Éº„É≥„ÅÆÊ∫ñÂÇô
    gameState.turn++;
    console.log('üîÑ „Çø„Éº„É≥', gameState.turn, 'ÈñãÂßã');
    
    // „Çø„Éº„É≥ÈñãÂßã„Éù„ÉÉ„Éó„Ç¢„ÉÉ„ÉóË°®Á§∫
    showPhasePopup('start');
    
    // PPÂ¢óÂä†Ôºà‰∏°ËÄÖÔºâ
    const oldMaxPP = gameState.maxPP;
    const oldEnemyMaxPP = gameState.enemyMaxPP;
    gameState.maxPP = Math.min(gameState.maxPP + 1, 5);
    gameState.playerPP = gameState.maxPP;
    gameState.enemyMaxPP = Math.min(gameState.enemyMaxPP + 1, 5);
    gameState.enemyPP = gameState.enemyMaxPP;
    
    console.log('üíé PPÂ¢óÂä†:');
    console.log('  „Éó„É¨„Ç§„É§„Éº:', `${oldMaxPP}‚Üí${gameState.maxPP}PP (ÁèæÂú®PP: ${gameState.playerPP})`);
    console.log('  Êïµ:', `${oldEnemyMaxPP}‚Üí${gameState.enemyMaxPP}PP (ÁèæÂú®PP: ${gameState.enemyPP})`);
    
    // „Éâ„É≠„ÉºÔºà‰∏°ËÄÖÔºâ
    if (gameState.playerDeck.length > 0 && gameState.playerHand.length < 7) {
        const drawnCard = gameState.playerDeck.pop();
        gameState.playerHand.push(drawnCard);
        console.log('üé¥ „Éó„É¨„Ç§„É§„Éº„Éâ„É≠„Éº:', drawnCard.name, `(ÊâãÊú≠: ${gameState.playerHand.length}/7Êûö)`);
    } else {
        console.log('‚ö†Ô∏è „Éó„É¨„Ç§„É§„Éº„ÅØ„Éâ„É≠„Éº„Åß„Åç„Åæ„Åõ„Çì', `(„Éá„ÉÉ„Ç≠: ${gameState.playerDeck.length}Êûö, ÊâãÊú≠: ${gameState.playerHand.length}/7Êûö)`);
    }
    
    if (gameState.enemyDeck.length > 0 && gameState.enemyHand.length < 7) {
        const drawnCard = gameState.enemyDeck.pop();
        gameState.enemyHand.push(drawnCard);
        console.log('üé¥ Êïµ„Éâ„É≠„Éº:', drawnCard.name, `(ÊâãÊú≠: ${gameState.enemyHand.length}/7Êûö)`);
    } else {
        console.log('‚ö†Ô∏è Êïµ„ÅØ„Éâ„É≠„Éº„Åß„Åç„Åæ„Åõ„Çì', `(„Éá„ÉÉ„Ç≠: ${gameState.enemyDeck.length}Êûö, ÊâãÊú≠: ${gameState.enemyHand.length}/7Êûö)`);
    }
    
    gameState.phase = 'summon';
    console.log('üîç „Éï„Çß„Éº„Ç∫„Çπ„Ç≠„ÉÉ„ÉóÊ§úÂá∫Áî®„É≠„Ç∞:', {
        Êñ∞„Çø„Éº„É≥: gameState.turn,
        Ë®≠ÂÆö„Éï„Çß„Éº„Ç∫: gameState.phase,
        „Éó„É¨„Ç§„É§„ÉºÁ©∫„Åç„Çπ„É≠„ÉÉ„Éà: gameState.playerField.filter(c => c === null).length,
        ÊïµÁ©∫„Åç„Çπ„É≠„ÉÉ„Éà: gameState.enemyField.filter(c => c === null).length,
        „Éó„É¨„Ç§„É§„ÉºÊâãÊú≠„ÅÇ„Çä: gameState.playerHand.length > 0,
        „Éó„É¨„Ç§„É§„ÉºPP: gameState.playerPP,
        ÈÖçÁΩÆÂèØËÉΩÂà§ÂÆö: gameState.playerHand.some(card => gameState.playerPP >= card.cost && gameState.playerField.includes(null))
    });
    showMessage('Êñ∞„Åó„ÅÑ„Çø„Éº„É≥ÈñãÂßãÔºÅ„Ç´„Éº„Éâ„ÇíÈÖçÁΩÆ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    updateDisplay();
}

function enemyAISummon() {
    console.log('ü§ñ ÊïµAIÂè¨Âñö„Éï„Çß„Éº„Ç∫ÈñãÂßã - Âà©Áî®ÂèØËÉΩPP:', gameState.enemyPP);
    console.log('üÉè Êïµ„ÅÆÊâãÊú≠:', gameState.enemyHand.map(c => `${c.name}(„Ç≥„Çπ„Éà:${c.cost})`));
    
    if (gameState.enemyHand.length > 0) {
        // „Ç≥„Çπ„Éà„ÅåÈ´ò„ÅÑÈ†Ü„Å´„ÇΩ„Éº„Éà
        const sortedCards = gameState.enemyHand.sort((a, b) => b.cost - a.cost);
        console.log('üìà Âè¨ÂñöÂÑ™ÂÖàÈ†Ü‰Ωç(„Ç≥„Çπ„ÉàÈôçÈ†Ü):', sortedCards.map(c => `${c.name}(${c.cost})`));
        const summonedCards = [];
        
        // PP„ÅåÁ∂ö„ÅèÈôê„Çä„ÄÅ„Ç≥„Çπ„Éà„ÅÆÈ´ò„ÅÑ„Ç´„Éº„Éâ„Åã„ÇâÈ†ÜÁï™„Å´Âè¨Âñö
        for (const card of sortedCards) {
            if (gameState.enemyPP >= card.cost && hasEmptySlot(gameState.enemyField)) {
                const emptyIndex = gameState.enemyField.findIndex(slot => slot === null);
                console.log('üÉè Êïµ„Ç´„Éº„ÉâÂè¨Âñö:', card.name, `(„Ç≥„Çπ„Éà:${card.cost}, „Çπ„É≠„ÉÉ„Éà:${emptyIndex + 1}, ÊÆã„ÇäPP:${gameState.enemyPP}‚Üí${gameState.enemyPP - card.cost})`);
                
                gameState.enemyField[emptyIndex] = card;
                gameState.enemyPP -= card.cost;
                gameState.enemyHand = gameState.enemyHand.filter(c => c.id !== card.id);
                summonedCards.push(card.name);
            } else {
                const reason = gameState.enemyPP < card.cost ? 'PP‰∏çË∂≥' : '„Éï„Ç£„Éº„É´„ÉâÊ∫ÄÊùØ';
                console.log('‚ùå Âè¨Âñö„Åß„Åç„Åæ„Åõ„Çì:', card.name, `(ÁêÜÁî±:${reason})`);
            }
        }
        
        if (summonedCards.length > 0) {
            console.log('‚úÖ ÊïµÂè¨ÂñöÂÆå‰∫Ü:', summonedCards);
            
            // SEÂÜçÁîü: Êïµ„Ç´„Éº„ÉâÂè¨ÂñöÔºàÂ∞ë„ÅóÈÅÖÂª∂Ôºâ
            setTimeout(() => {
                SoundManager.play('summon');
            }, 500);
            
            showMessage(`Êïµ„Åå${summonedCards.join('„ÄÅ')}„ÇíÂè¨ÂñöÔºÅ`);
            updateDisplay();
        } else {
            console.log('‚ö†Ô∏è Êïµ„ÅØ‰Ωï„ÇÇÂè¨Âñö„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü');
        }
    }
}

// Áµ±ÂêàÂãùÊïóÂà§ÂÆöÔºàÊíÉÁ†¥ÊôÇ„Å´Âç≥Â∫ßÂÆüË°åÔºâ
function checkVictoryCondition() {
    console.log('üîç ÂãùÊïóÂà§ÂÆö:', {
        „Éó„É¨„Ç§„É§„ÉºÊíÉÁ†¥„Ç≥„Çπ„Éà: gameState.defeatedCost,
        ÊïµÊíÉÁ†¥„Ç≥„Çπ„Éà: gameState.enemyDefeatedCost,
        „Éó„É¨„Ç§„É§„ÉºÂ†¥: gameState.playerField.filter(c => c !== null).length,
        „Éó„É¨„Ç§„É§„ÉºÊâãÊú≠: gameState.playerHand.length,
        ÊïµÂ†¥: gameState.enemyField.filter(c => c !== null).length,
        ÊïµÊâãÊú≠: gameState.enemyHand.length
    });
    
    // 1. ÊíÉÁ†¥„Ç≥„Çπ„ÉàÂÑ™ÂÖà„ÉÅ„Çß„ÉÉ„ÇØÔºàÊúÄÂÑ™ÂÖàÔºâ
    if (gameState.defeatedCost >= 5) {
        return { 
            result: "player_victory", 
            message: "üéâ ÂãùÂà©ÔºÅ5„Ç≥„Çπ„ÉàÊíÉÁ†¥„ÅßÂãùÂà©„Åß„ÅôÔºÅüéâ",
            sound: "victory"
        };
    }
    if (gameState.enemyDefeatedCost >= 5) {
        return { 
            result: "enemy_victory", 
            message: "üíÄ ÊïóÂåóÔºÅÊïµ„Å´5„Ç≥„Çπ„ÉàÂàÜÊíÉÁ†¥„Åï„Çå„Åæ„Åó„Åü...",
            sound: "defeat"
        };
    }
    
    // 2. „Ç¨„É©Á©∫„Åç„ÉÅ„Çß„ÉÉ„ÇØÔºà„Éï„Ç£„Éº„É´„Éâ„Ç´„Éº„Éâ„ÅÆ„Åø„ÄÅÊâãÊú≠„ÅØÈô§Â§ñÔºâ
    const playerCardsOnField = gameState.playerField.filter(c => c !== null);
    const enemyCardsOnField = gameState.enemyField.filter(c => c !== null);
    
    // ‰∏°Êñπ„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÅØÂºï„ÅçÂàÜ„Åë
    if (playerCardsOnField.length === 0 && enemyCardsOnField.length === 0) {
        return { 
            result: "draw", 
            message: "‚öñÔ∏è Âºï„ÅçÂàÜ„ÅëÔºÅ‰∏°Ëªç„Éï„Ç£„Éº„É´„Éâ„ÅåÂêåÊôÇ„Å´ÂÖ®ÊªÖ„Åó„Åæ„Åó„Åü",
            sound: "button"
        };
    }
    
    if (playerCardsOnField.length === 0) {
        return { 
            result: "player_defeat", 
            message: "üíÄ ÊïóÂåóÔºÅ„Éï„Ç£„Éº„É´„Éâ„ÅåÁ©∫„Å´„Å™„Çä„Åæ„Åó„Åü...",
            sound: "defeat"
        };
    }
    if (enemyCardsOnField.length === 0) {
        return { 
            result: "enemy_defeat", 
            message: "üéâ ÂãùÂà©ÔºÅÊïµ„ÅÆ„Éï„Ç£„Éº„É´„Éâ„ÅåÁ©∫„Å´„Å™„Çä„Åæ„Åó„ÅüÔºÅüéâ",
            sound: "victory"
        };
    }
    
    return { result: null };
}

// „Ç≤„Éº„É†ÁµÇ‰∫ÜÂá¶ÁêÜ
function gameOver(result, message, sound) {
    console.log('üéÆ „Ç≤„Éº„É†ÁµÇ‰∫Ü:', result, message);
    console.log('üîç „Ç≤„Éº„É†ÁµÇ‰∫ÜÊôÇ„ÅÆÁä∂ÊÖã:', {
        „Éó„É¨„Ç§„É§„ÉºÂãùÂà©„Éù„Ç§„É≥„Éà: gameState.defeatedCost + '/5',
        ÊïµÂãùÂà©„Éù„Ç§„É≥„Éà: gameState.enemyDefeatedCost + '/5',
        „Éó„É¨„Ç§„É§„Éº„Éï„Ç£„Éº„É´„Éâ: gameState.playerField.filter(c => c !== null).length + 'Êûö',
        Êïµ„Éï„Ç£„Éº„É´„Éâ: gameState.enemyField.filter(c => c !== null).length + 'Êûö',
        „Çø„Éº„É≥: gameState.turn,
        „Éï„Çß„Éº„Ç∫: gameState.phase
    });
    
    gameState.gameOver = true; // „Ç≤„Éº„É†ÁµÇ‰∫Ü„Éï„É©„Ç∞„ÇíË®≠ÂÆö
    gameState.phase = 'gameover';
    elements.endTurnBtn.disabled = true;
    
    // ÊîªÊíÉ„É¢„Éº„Éâ„ÇíËß£Èô§
    if (gameState.attackMode) {
        gameState.attackMode = false;
        gameState.currentAttacker = null;
        console.log('üö´ ÊîªÊíÉ„É¢„Éº„ÉâÂº∑Âà∂Ëß£Èô§Ôºà„Ç≤„Éº„É†ÁµÇ‰∫ÜÔºâ');
    }
    
    // ÂÖ®„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíÂâäÈô§
    document.removeEventListener('click', handleAttackCancelClick);
    
    setTimeout(() => {
        // SEÂÜçÁîü
        SoundManager.play(sound);
        showMessage(message);
        updateDisplay(); // UIÁä∂ÊÖã„ÇíÊõ¥Êñ∞
        
        // üéâ ÂãùÊïóÁµêÊûú„É¢„Éº„ÉÄ„É´Ë°®Á§∫
        showGameResultModal(result, message);
        console.log('üé≠ ÂãùÊïóÁµêÊûú„É¢„Éº„ÉÄ„É´Ë°®Á§∫:', result);
        console.log('‚úÖ „Ç≤„Éº„É†ÁµÇ‰∫ÜÂá¶ÁêÜÂÆå‰∫Ü');
    }, 500);
}

// üé≠ „Ç≤„Éº„É†ÁµêÊûú„É¢„Éº„ÉÄ„É´Ë°®Á§∫
function showGameResultModal(result, message) {
    console.log('üîç showGameResultModal Âëº„Å≥Âá∫„Åó:', { result, message });
    
    const modal = document.getElementById('game-result-modal');
    const icon = document.getElementById('result-icon');
    const title = document.getElementById('result-title');
    const messageElement = document.getElementById('result-message');
    
    // ÁµêÊûú„Å´Âøú„Åò„Å¶„Ç¢„Ç§„Ç≥„É≥„Éª„Çø„Ç§„Éà„É´„ÉªËâ≤„ÇíË®≠ÂÆö
    let iconText, titleText, titleClass;
    
    console.log('üîç switchÊñá ÂÆüË°åÂâç„ÅÆ result:', result);
    switch (result) {
        case 'victory':
        case 'player_victory':
        case 'enemy_defeat':
            iconText = 'üéâ';
            titleText = 'ÂãùÂà©';
            titleClass = 'victory';
            console.log('üèÜ ÂãùÂà©„Ç±„Éº„ÇπÈÅ©Áî®');
            break;
        case 'defeat':
        case 'player_defeat':
        case 'enemy_victory':
            iconText = 'üòµ';
            titleText = 'ÊïóÂåó';
            titleClass = 'defeat';
            console.log('üíÄ ÊïóÂåó„Ç±„Éº„ÇπÈÅ©Áî®');
            break;
        case 'draw':
            iconText = 'ü§ù';
            titleText = 'Âºï„ÅçÂàÜ„Åë';
            titleClass = 'draw';
            console.log('ü§ù Âºï„ÅçÂàÜ„Åë„Ç±„Éº„ÇπÈÅ©Áî®');
            break;
        default:
            iconText = 'üèÅ';
            titleText = '„Ç≤„Éº„É†ÁµÇ‰∫Ü';
            titleClass = '';
            console.log('‚ö†Ô∏è „Éá„Éï„Ç©„É´„Éà„Ç±„Éº„ÇπÈÅ©Áî® - ‰∫àÊúü„Åó„Å™„ÅÑÁµêÊûú:', result);
    }
    
    // „É¢„Éº„ÉÄ„É´ÂÜÖÂÆπ„ÇíÊõ¥Êñ∞
    icon.textContent = iconText;
    title.textContent = titleText;
    title.className = `result-title ${titleClass}`;
    messageElement.textContent = message;
    
    // „É¢„Éº„ÉÄ„É´Ë°®Á§∫
    modal.style.display = 'flex';
    console.log('üé≠ „É¢„Éº„ÉÄ„É´Ë°®Á§∫ÂÆå‰∫Ü:', { result, iconText, titleText, message });
}

// „Çπ„É©„ÉÉ„Ç∑„É•„Ç®„Éï„Çß„ÇØ„ÉàË°®Á§∫ÔºàÂÆüË£Ö‰øùÁïôÔºâ
function showSlashEffect(target, isEffective = false, attackerElement = null) {
    // „Çπ„É©„ÉÉ„Ç∑„É•„Ç®„Éï„Çß„ÇØ„Éà„ÅÆÂÆüË£Ö„ÅØ‰øùÁïô‰∏≠
    // „ÉÄ„É°„Éº„Ç∏„Ç®„Éï„Çß„ÇØ„Éà„ÅßÂçÅÂàÜ„Å™Ë¶ñË¶öÁöÑ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÇíÊèê‰æõ
    console.log('‚öîÔ∏è „Çπ„É©„ÉÉ„Ç∑„É•„Ç®„Éï„Çß„ÇØ„ÉàÔºà‰øùÁïô‰∏≠Ôºâ:', target.name, 'ÂäπÊûúÁöÑ:', isEffective);
    return;
    
    /* ÂÆüË£Ö‰øùÁïô‰∏≠„ÅÆ„Ç≥„Éº„Éâ
    const targetElement = document.querySelector(`[data-card-id="${target.id}"]`);
    if (!targetElement) {
        console.warn('‚ö†Ô∏è ÂØæË±°„Ç´„Éº„ÉâË¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', target.id);
        return;
    }
    
    const slashElement = document.createElement('div');
    let className = `slash-effect ${isEffective ? 'effective' : ''}`;
    
    if (isEffective && attackerElement) {
        className += ` ${attackerElement}`;
    }
    
    slashElement.className = className;
    
    if (getComputedStyle(targetElement).position === 'static') {
        targetElement.style.position = 'relative';
    }
    targetElement.appendChild(slashElement);
    
    setTimeout(() => {
        if (slashElement && slashElement.parentNode) {
            slashElement.parentNode.removeChild(slashElement);
        }
    }, 600);
    */
}

// „ÉÄ„É°„Éº„Ç∏„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ë°®Á§∫
function showDamageAnimation(target, damageInfo, attackerElement = null) {
    // ÂØæË±°„Ç´„Éº„Éâ„ÅÆË¶ÅÁ¥†„ÇíÂèñÂæó
    const targetElement = document.querySelector(`[data-card-id="${target.id}"]`);
    if (!targetElement) {
        console.warn('‚ö†Ô∏è ÂØæË±°„Ç´„Éº„ÉâË¶ÅÁ¥†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì:', target.id);
        return;
    }
    
    // „ÉÄ„É°„Éº„Ç∏„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ë¶ÅÁ¥†„Çí‰ΩúÊàê
    const damageElement = document.createElement('div');
    let className = `damage-animation ${damageInfo.isEffective ? 'effective' : ''}`;
    
    // Áõ∏ÂâãÂäπÊûú„Åå„ÅÇ„ÇãÂ†¥Âêà„ÄÅÊîªÊíÉÂÅ¥„ÅÆÂ±ûÊÄß„ÇíËøΩÂä†
    if (damageInfo.isEffective && attackerElement) {
        className += ` ${attackerElement}`;
    }
    
    damageElement.className = className;
    damageElement.textContent = `-${damageInfo.damage}`;
    
    // „Ç´„Éº„ÉâË¶ÅÁ¥†„Å´ËøΩÂä†ÔºàÁõ∏ÂØæÈÖçÁΩÆÔºâ
    targetElement.style.position = 'relative';
    targetElement.appendChild(damageElement);
    
    console.log('üí• „ÉÄ„É°„Éº„Ç∏„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Ë°®Á§∫:', {
        ÂØæË±°: target.name,
        „ÉÄ„É°„Éº„Ç∏: damageInfo.damage,
        ÂäπÊûúÁöÑ: damageInfo.isEffective,
        ÊîªÊíÉÂ±ûÊÄß: attackerElement
    });
    
    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÁµÇ‰∫ÜÂæå„Å´Ë¶ÅÁ¥†„ÇíÂâäÈô§
    setTimeout(() => {
        if (damageElement.parentNode) {
            damageElement.parentNode.removeChild(damageElement);
        }
    }, 1000);
}

// Á¢∫ÂÆü„Å´„Ç≥„Çπ„Éà1„ÅåÂÖ•„ÇãÊâãÊú≠ÁîüÊàêÔºà„Éû„É™„Ç¨„É≥Ëá™ÂãïÂåñÔºâ
function generateStartingHand(deck) {
    const cost1Cards = deck.filter(card => card.cost === 1);
    const otherCards = deck.filter(card => card.cost !== 1);
    
    if (cost1Cards.length === 0) {
        console.error('‚ùå „Éá„ÉÉ„Ç≠„Å´„Ç≥„Çπ„Éà1„Ç´„Éº„Éâ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
        // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºöÈÄöÂ∏∏„ÅÆ„É©„É≥„ÉÄ„É†ÊâãÊú≠
        return deck.slice(0, 3);
    }
    
    console.log('üé¥ ÊâãÊú≠ÁîüÊàêÈñãÂßã:', {
        „Éá„ÉÉ„Ç≠„Çµ„Ç§„Ç∫: deck.length,
        „Ç≥„Çπ„Éà1„Ç´„Éº„Éâ: cost1Cards.length + 'Êûö',
        „Åù„ÅÆ‰ªñ„Ç´„Éº„Éâ: otherCards.length + 'Êûö'
    });
    
    // ÂøÖ„Åö1Êûö„ÅØ„Ç≥„Çπ„Éà1„Çí‰øùË®º
    const guaranteedCost1 = cost1Cards[Math.floor(Math.random() * cost1Cards.length)];
    const hand = [guaranteedCost1];
    
    // ÊÆã„Çä2Êûö„Çí„É©„É≥„ÉÄ„É†ÈÅ∏ÊäûÔºà„Éá„ÉÉ„Ç≠ÂÖ®‰Ωì„Åã„Çâ„ÄÅ‰øùË®º„Åó„Åü„Ç´„Éº„Éâ„ÇíÈô§„ÅèÔºâ
    const remainingDeck = deck.filter(card => card.id !== guaranteedCost1.id);
    const shuffledRemaining = shuffleArray(remainingDeck);
    
    for (let i = 0; i < 2 && i < shuffledRemaining.length; i++) {
        hand.push(shuffledRemaining[i]);
    }
    
    console.log('‚úÖ ÊâãÊú≠ÁîüÊàêÂÆå‰∫Ü:', hand.map(c => `${c.name}(„Ç≥„Çπ„Éà:${c.cost})`));
    console.log('üéØ „Ç≥„Çπ„Éà1‰øùË®º:', hand.some(c => c.cost === 1) ? 'ÊàêÂäü' : 'Â§±Êïó');
    
    return hand;
}

function initializeGame() {
    // SEÂàùÊúüÂåñÔºà„Ç≤„Éº„É†ÈñãÂßãÊôÇ„ÅÆ„ÅøÔºâ
    if (!SoundManager.sounds.summon) {
        SoundManager.init();
    }
    
    // „Éá„ÉÉ„Ç≠‰ΩúÊàê
    const playerDeckBase = shuffleArray(cardData.map(card => createCard(card, true)));
    const enemyDeckBase = shuffleArray(cardData.map(card => createCard(card, false)));
    
    // ÂàùÊúüÊâãÊú≠Ôºà„Ç≥„Çπ„Éà1‰øùË®ºÔºâ
    gameState.playerHand = generateStartingHand(playerDeckBase);
    gameState.enemyHand = generateStartingHand(enemyDeckBase);
    
    // ÊâãÊú≠„Å´ÈÅ∏„Å∞„Çå„Åü„Ç´„Éº„Éâ„Çí„Éá„ÉÉ„Ç≠„Åã„ÇâÂâäÈô§
    gameState.playerDeck = playerDeckBase.filter(card => 
        !gameState.playerHand.some(handCard => handCard.id === card.id)
    );
    gameState.enemyDeck = enemyDeckBase.filter(card => 
        !gameState.enemyHand.some(handCard => handCard.id === card.id)
    );
    
    console.log('üéÆ „Ç≤„Éº„É†ÂàùÊúüÂåñÂÆå‰∫Ü:', {
        „Éó„É¨„Ç§„É§„ÉºÊâãÊú≠: gameState.playerHand.length + 'Êûö',
        „Éó„É¨„Ç§„É§„Éº„Éá„ÉÉ„Ç≠: gameState.playerDeck.length + 'Êûö',
        ÊïµÊâãÊú≠: gameState.enemyHand.length + 'Êûö',
        Êïµ„Éá„ÉÉ„Ç≠: gameState.enemyDeck.length + 'Êûö'
    });
    
    // „Ç≤„Éº„É†ÈñãÂßãÔºà„Éû„É™„Ç¨„É≥‰∏çË¶ÅÔºâ
    gameState.phase = 'summon';
    gameState.gameOver = false; // „Ç≤„Éº„É†ÁµÇ‰∫Ü„Éï„É©„Ç∞„Çí„É™„Çª„ÉÉ„Éà
    
    // üõ†Ô∏è Êñ∞Ê©üËÉΩ„Éó„É≠„Éë„ÉÜ„Ç£„ÅÆÂàùÊúüÂåñ
    gameState.currentEnemyAttacker = null;
    gameState.simultaneousCombatCards = [];
    gameState.attackMode = false;
    gameState.currentAttacker = null;
    gameState.justStartedAttack = false;
    
    console.log('üîß Êñ∞Ê©üËÉΩ„Éó„É≠„Éë„ÉÜ„Ç£ÂàùÊúüÂåñÂÆå‰∫Ü:', {
        currentEnemyAttacker: gameState.currentEnemyAttacker,
        simultaneousCombatCards: gameState.simultaneousCombatCards?.length,
        attackMode: gameState.attackMode
    });
    
    elements.endTurnBtn.disabled = false; // „Éú„Çø„É≥„ÇíÊúâÂäπÂåñ
    showMessage('„Ç≤„Éº„É†ÈñãÂßãÔºÅÊâãÊú≠„Åã„Çâ„Ç´„Éº„Éâ„ÇíÈÅ∏„Çì„Åß„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    updateDisplay();
    
    // BGMÂÜçÁîü„ÅØÊúÄÂàù„ÅÆ„É¶„Éº„Ç∂„ÉºÊìç‰Ωú„ÅßÈñãÂßã
}

// „Çπ„Çø„Éº„ÉàÁîªÈù¢„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
elements.startBtn.addEventListener('click', () => {
    // SEÂÜçÁîü: „Éú„Çø„É≥
    SoundManager.play('button');
    
    // BGMÈñãÂßãÔºàÂàùÂõû„É¶„Éº„Ç∂„ÉºÊìç‰ΩúÔºâ
    SoundManager.startBGM();
    
    // „Çπ„Çø„Éº„ÉàÁîªÈù¢„ÇíÈùûË°®Á§∫„Å´„Åó„Å¶„Ç≤„Éº„É†ÈñãÂßã
    elements.startScreen.style.display = 'none';
    elements.gameContainer.style.display = 'block';
    elements.controlPanel.style.display = 'flex';
    
    // „Ç≤„Éº„É†ÂàùÊúüÂåñ
    initializeGame();
});

// Èü≥Èüø„Ç≥„É≥„Éà„É≠„Éº„É´„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
elements.audioToggle.addEventListener('click', () => {
    const panel = elements.audioPanel;
    panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
});

elements.audioClose.addEventListener('click', () => {
    elements.audioPanel.style.display = 'none';
});

elements.bgmToggle.addEventListener('click', () => {
    const enabled = SoundManager.toggleBGM();
    elements.bgmToggle.textContent = enabled ? 'ON' : 'OFF';
    elements.bgmToggle.className = enabled ? 'toggle-btn' : 'toggle-btn off';
});

elements.seToggle.addEventListener('click', () => {
    const enabled = SoundManager.toggleSE();
    elements.seToggle.textContent = enabled ? 'ON' : 'OFF';
    elements.seToggle.className = enabled ? 'toggle-btn' : 'toggle-btn off';
});

elements.bgmVolume.addEventListener('input', (e) => {
    SoundManager.setBGMVolume(e.target.value);
});

elements.seVolume.addEventListener('input', (e) => {
    SoundManager.setSEVolume(e.target.value);
});

// „Ç≤„Éº„É†„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
elements.endTurnBtn.addEventListener('click', () => {
    // SEÂÜçÁîü: „Éú„Çø„É≥
    SoundManager.play('button');
    
    if (gameState.phase === 'summon') {
        nextPhase();
    } else if (gameState.phase === 'battle') {
        nextPhase();
    }
});

elements.skipActionBtn.addEventListener('click', () => {
    // SEÂÜçÁîü: „Éú„Çø„É≥
    SoundManager.play('button');
    
    if (gameState.phase === 'battle') {
        // ÁèæÂú®„ÅÆË°åÂãïËÄÖ„Çí„Çπ„Ç≠„ÉÉ„Éó
        const currentTurnCard = gameState.turnOrder.find(card => !card.hasActed);
        if (currentTurnCard && currentTurnCard.isPlayer) {
            currentTurnCard.hasActed = true;
            showMessage(`${currentTurnCard.name}„ÅÆË°åÂãï„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü`);
            updateDisplay();
            updateTurnOrderDisplay();
            
            // Ê¨°„ÅÆË°åÂãïËÄÖ„Å∏
            setTimeout(() => {
                if (checkBattleEnd()) {
                    nextPhase();
                } else {
                    // Ê¨°„ÅÆË°åÂãïËÄÖ„ÅåAI„ÅÆÂ†¥Âêà„ÄÅËá™Âãï„ÅßË°åÂãï
                    const nextCard = gameState.turnOrder.find(card => !card.hasActed);
                    if (nextCard && !nextCard.isPlayer) {
                        enemyAutoAttack(nextCard);
                    }
                }
            }, 1000);
        }
    }
});

elements.restartBtn.addEventListener('click', () => {
    // SEÂÜçÁîü: „Éú„Çø„É≥
    SoundManager.play('button');
    
    // „Ç≤„Éº„É†Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
    gameState = {
        phase: 'draw',
        turn: 1,
        playerPP: 1,
        maxPP: 1,
        enemyPP: 1,
        enemyMaxPP: 1,
        playerHand: [],
        playerDeck: [],
        enemyHand: [],
        enemyDeck: [],
        playerField: [null, null, null],
        enemyField: [null, null, null],
        defeatedCost: 0,
        enemyDefeatedCost: 0,
        attackMode: false,
        currentAttacker: null,
        battleQueue: [],
        turnOrder: [],
        messageHistory: []
    };
    
    // „Éú„Çø„É≥„ÅÆÂàùÊúüÂåñ
    elements.endTurnBtn.style.display = 'inline-block';
    elements.skipActionBtn.style.display = 'none';
    
    // „Ç≤„Éº„É†ÂÜçÈñã
    initializeGame();
});

// „Éò„É´„Éó„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
document.getElementById('help-toggle').addEventListener('click', () => {
    const helpModal = document.getElementById('help-modal');
    // SEÂÜçÁîü: „Éú„Çø„É≥
    SoundManager.play('button');
    helpModal.style.display = 'flex';
});

document.getElementById('help-close').addEventListener('click', () => {
    const helpModal = document.getElementById('help-modal');
    // SEÂÜçÁîü: „Éú„Çø„É≥
    SoundManager.play('button');
    helpModal.style.display = 'none';
});

// „Éò„É´„Éó„É¢„Éº„ÉÄ„É´„ÅÆËÉåÊôØ„ÇØ„É™„ÉÉ„ÇØ„ÅßÈñâ„Åò„Çã
document.getElementById('help-modal').addEventListener('click', (e) => {
    if (e.target.id === 'help-modal') {
        const helpModal = document.getElementById('help-modal');
        helpModal.style.display = 'none';
    }
});

// üé≠ ÂãùÊïóÁµêÊûú„É¢„Éº„ÉÄ„É´„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
document.getElementById('result-restart-btn').addEventListener('click', () => {
    console.log('üîÑ ÁµêÊûú„É¢„Éº„ÉÄ„É´„Åã„Çâ„Ç≤„Éº„É†ÂÜçÈñã');
    SoundManager.play('button');
    
    // „É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã
    document.getElementById('game-result-modal').style.display = 'none';
    
    // „Ç≤„Éº„É†Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
    gameState = {
        phase: 'draw',
        turn: 1,
        playerPP: 1,
        maxPP: 1,
        enemyPP: 1,
        gameOver: false,
        enemyMaxPP: 1,
        playerHand: [],
        playerDeck: [],
        enemyHand: [],
        enemyDeck: [],
        playerField: [null, null, null],
        enemyField: [null, null, null],
        defeatedCost: 0,
        enemyDefeatedCost: 0,
        attackMode: false,
        currentAttacker: null,
        justStartedAttack: false,
        currentEnemyAttacker: null,
        simultaneousCombatCards: [],
        battleQueue: [],
        turnOrder: [],
        messageHistory: []
    };
    
    // „Ç≤„Éº„É†ÂÜçÈñã
    initializeGame();
});

document.getElementById('result-close-btn').addEventListener('click', () => {
    console.log('‚ùå ÁµêÊûú„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã');
    SoundManager.play('button');
    document.getElementById('game-result-modal').style.display = 'none';
});

// ÁµêÊûú„É¢„Éº„ÉÄ„É´„ÅÆËÉåÊôØ„ÇØ„É™„ÉÉ„ÇØ„ÅßÈñâ„Åò„Çã
document.getElementById('game-result-modal').addEventListener('click', (e) => {
    if (e.target.id === 'game-result-modal' || e.target.classList.contains('result-overlay')) {
        console.log('üì± ËÉåÊôØ„ÇØ„É™„ÉÉ„ÇØ„ÅßÁµêÊûú„É¢„Éº„ÉÄ„É´„ÇíÈñâ„Åò„Çã');
        document.getElementById('game-result-modal').style.display = 'none';
    }
});

// „Éò„É´„Éó„Çø„ÉñÂàá„ÇäÊõø„ÅàÊ©üËÉΩ üå∏
function initializeHelpTabs() {
    console.log('üéØ „Éò„É´„Éó„Çø„Éñ„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ');
    
    const tabButtons = document.querySelectorAll('.help-tab-btn');
    const tabPanels = document.querySelectorAll('.tab-panel');
    
    // „Çø„Éñ„Éú„Çø„É≥„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„Ç§„Éô„É≥„Éà
    tabButtons.forEach(button => {
        button.addEventListener('click', () => {
            // SEÂÜçÁîü: „Éú„Çø„É≥
            SoundManager.play('button');
            
            const targetTab = button.getAttribute('data-tab');
            console.log('üéØ „Çø„ÉñÂàá„ÇäÊõø„Åà:', targetTab);
            
            // ÂÖ®„Å¶„ÅÆ„Çø„Éñ„Éú„Çø„É≥„Åã„Çâactive„ÇØ„É©„Çπ„ÇíÂâäÈô§
            tabButtons.forEach(btn => btn.classList.remove('active'));
            // ÂÖ®„Å¶„ÅÆ„Çø„Éñ„Éë„Éç„É´„Åã„Çâactive„ÇØ„É©„Çπ„ÇíÂâäÈô§
            tabPanels.forEach(panel => panel.classList.remove('active'));
            
            // „ÇØ„É™„ÉÉ„ÇØ„Åï„Çå„Åü„Çø„Éñ„Éú„Çø„É≥„Çí„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å´
            button.classList.add('active');
            // ÂØæÂøú„Åô„Çã„Çø„Éñ„Éë„Éç„É´„Çí„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å´
            const targetPanel = document.getElementById(targetTab + '-tab');
            if (targetPanel) {
                targetPanel.classList.add('active');
                console.log('‚úÖ „Çø„ÉñË°®Á§∫:', targetTab);
            } else {
                console.warn('‚ö†Ô∏è „Çø„Éñ„Éë„Éç„É´Êú™Áô∫Ë¶ã:', targetTab + '-tab');
            }
        });
    });
    
    console.log('‚úÖ „Éò„É´„Éó„Çø„Éñ„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÂÆå‰∫Ü');
}

// „Ç≤„Éº„É†ÈñãÂßã
initializeGame();

// „Éò„É´„Éó„Çø„Éñ„Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñÔºàDOMË™≠„ÅøËæº„ÅøÂæåÔºâ
document.addEventListener('DOMContentLoaded', () => {
    initializeHelpTabs();
});